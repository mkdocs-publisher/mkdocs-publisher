import logging
from collections import OrderedDict
from datetime import datetime
from pathlib import Path
from typing import Dict

from mkdocs.config import Config
from mkdocs.config import config_options
from mkdocs.plugins import BasePlugin
from mkdocs.structure.files import Files
from mkdocs.structure.nav import Navigation
from mkdocs.structure.pages import Page

from src import modifiers
from src import parsers
from src import rendereres
from src.structures import BlogPost

log = logging.getLogger(f"mkdocs.plugins.{__name__}")


class BloggerPlugin(BasePlugin):
    config_scheme = (
        ("posts_dir", config_options.Type(str, default="posts")),
        ("teaser_marker", config_options.Type(str, default="<!-- more -->")),
        ("teaser_link_text", config_options.Type(str, default="Read more ...")),
        ("index_name", config_options.Type(str, default="Blog")),
    )

    def __init__(self):
        self.blog_posts: Dict[datetime, BlogPost] = {}
        self.posts_index_files: Dict[str, Path] = {}

    def on_config(self, config: Config):

        # New config navigation
        config_nav = OrderedDict()

        parsers.parse_markdown_files(
            blog_posts=self.blog_posts,
            config_nav=config_nav,
            docs_dir=Path(str(config.get("docs_dir"))),
            posts_dir=Path(self.config.get("posts_dir")),
        )

        parsers.create_blog_post_teaser(
            blog_posts=self.blog_posts, teaser_marker=self.config.get("teaser_marker")
        )

        rendereres.create_blog_post_index_pages(
            blog_posts=self.blog_posts,
            posts_index_files=self.posts_index_files,
            config_nav=config_nav,
            docs_dir=Path(str(config.get("docs_dir"))),
            teaser_link_text=str(self.config.get("teaser_link_text")),
            index_name=self.config.get("index_name"),
        )

        modifiers.blog_post_nav_sorter(
            blog_posts=self.blog_posts,
            config_nav=config_nav,
            posts_dir=Path(self.config.get("posts_dir")),
        )

        # Override nav section
        config["nav"] = config_nav

        return config

    def on_nav(self, nav: Navigation, config: Config, files: Files) -> Navigation:
        modifiers.blog_post_nav_remove(nav=nav, posts_dir=self.config.get("posts_dir"))

        return nav

    def on_files(self, files: Files, config: Config) -> Files:

        new_files = modifiers.blog_post_slug_modifier(
            blog_posts=self.blog_posts, files=files, site_dir=Path(str(config.get("site_dir")))
        )

        return new_files

    def on_page_markdown(self, markdown: str, *, page: Page, config: Config, files: Files):
        modifiers.prev_next_link_remove(
            page=page, blog_posts=self.blog_posts, posts_index_files=self.posts_index_files
        )

        # Modify page update date
        update_date: datetime = page.meta.get(
            "update", page.meta.get("date", datetime.strptime(page.update_date, "%Y-%m-%d"))
        )
        page.update_date = update_date.strftime("%Y-%m-%d")

        from pprint import pprint

        pprint(vars(page))

    def on_post_build(self, *, config: Config) -> None:

        # Remove autogenerated posts index files
        for post_index_file in self.posts_index_files.values():
            post_index_file.unlink(missing_ok=True)
