{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Publisher for MkDocs","text":"<p>Publisher for MkDocs is a set of plugins for MkDocs that was created originally as \u201cyet another blogging plugin for MkDocs\u201d (you can read more about this in this blog post). During a process of development, I realized that it can become something more that will help not only me with blog creation, but also as a part of a wider publishing tool. Documents creation can be used with cooperation with an Obsidian.md that is a tool for creating a second brain and also an excellent Markdown files editor.</p> <p>Currently, this plugin is also written with strict cooperation with Material for MkDocs theme. It was not tested on any, and probably some functionalities may not work as intended (for example, formatting of blog posts). However, all the plugins that are included in this package should work separately and not all of them have to be enabled (for example, pub-minifier will work with any other set of plugins).</p>"},{"location":"#core-concepts","title":"Core concepts","text":"<p>Publisher for MkDocs is a set of plugins that was created with the below concepts:</p> <p>User-friendly</p> <p>The whole process of installation and configuration should be as simple as possible, so it's harder to get stuck just at the beginning of the way. Most of the settings are predefined the way, that the author of the documentation doesn't have to spend much time on configuration, etc. I know that some elements are still overly complicated, but the development process is not finished, so there is always a room for improvements. On the other hand, this tool will always be limited by the design of the tools that it's relay on. Usually, whenever possible, this tool should simplify the whole process of documentation publication.</p> <p>Optimized for SEO</p> <p>All the documents, if created with World Wide Web publication in mind, should be SEO optimized, so they are easier to find by any search engines. SEO it's not only about information that documents contain, but also with some more technical aspects like file size, interlinking, page load time, etc. All those aspects are quite technical one and not always taken into consideration when an author writes any piece of written text. For that reason, this tool is written the way, that the author doesn't have to think about some of those aspects. Some of the aspects are also described in this documentation as part of the documentation process creation.</p> <p>Obsidian.md as first party editor</p> <p>Obsidian.md is becoming the tool for creating Personal Knowledge Management (PKM) or a Second Brain. If you don't know this tool, but you are using any note-taking app like Notion, Evernote, etc. You should definitely try Obsidian. Why? It's because it allows you to achieve much more than any of the above tools and your notes are stored in Markdown files, so it's a great fit for MkDocs since both tools use this format. What's more interesting, Obsidian has lots of community plugins that allow you to achieve more, and some of them are also a great fit for documentation creation and allow you to speed up the process of writing it. This entire documentation was written using Obsidian with all Publisher for MkDocs plugins enabled. You are not forced to use Obsidian for editing, but its worth trying/</p>"},{"location":"#included-features","title":"Included features","text":"<p>The list of most important features built into MkDocs Publisher:</p> <ul> <li>creating a blog posts with automatic build of archive, categories, tags, and index pages (pub-blog plugin),</li> <li>social cards metadata creation based on document metadata (pub-social plugin -  v0.5.0),</li> <li>file size optimizations, that is beneficial for site download speed and SEO (pub-minifier plugin -  v0.4.0),</li> <li>automatic documents navigation creation (pub-meta plugin -  v1.0.0),</li> <li>documents publication status with additional meta-data like URL names, etc. beneficial for SEO (pub-meta plugin -  v1.0.0),</li> <li>integration with Obsidian.md as documentation editor with support for some Markdown syntax specific to it and some plugins (pub-obsidian plugin  v1.0.0):<ul> <li>backlinks,</li> <li>callouts ,</li> <li>wikilinks</li> <li>vega charts (using Vega Visualization Plugin for Obsidian) - advanced solution for creating charts,</li> </ul> </li> <li>debugger and logging on steroids - useful for issue reporting and for MkDocs plugin development (pub-debugger plugin  v1.1.0).</li> </ul>"},{"location":"setup/installation/","title":"Installation","text":"<p>All plugins are part of this package and cannot be installed separately, but not all of them have to be enabled.</p> <p>Publisher for MkDocs is a Python package that can be installed using <code>pip</code> (ideally inside a virtual environment) or any other package manager like <code>poetry</code> that handles virtual management out of the box.</p> pippoetry <pre><code>pip install mkdocs-publisher\n</code></pre> <pre><code>poetry add mkdocs-publisher\n</code></pre> <p>This package depends on some other Python packages and MkDocs plugins, so during installation they will also be installed. List of them:</p> <ul> <li>MkDocs,</li> <li>Material for MkDocs - (probably) the best theme for MkDocs,</li> <li>PyMdown Extensions - extensions for Markdown language.</li> </ul> <p>There are also some external tools used, mostly by <code>pub-minifier</code> plugin. Since this plugin is part of this package, but it's optional to use (not enabled by default), the process of installation of those tools is described in this plugin installation.</p> <p>Backlinks:</p> First steps <p><p>Currently, please take a look at installation and each plugin configuration section of this documentation.</p></p>"},{"location":"setup/general/pub-meta/","title":"Setting up the meta plugin","text":""},{"location":"setup/general/pub-meta/#introduction","title":"Introduction","text":"<p>As you can see on the left - side menu, this plugin is placed as the first one. It is because this plugin can be considered as one that influences the way, you will be writing a documentation. So, why it's so essential?</p> <p>There are a few reasons:</p> <ol> <li>Automatic navigation building based on file and directory names. This simplifies a process of a document navigation creation in <code>mkdocs.yml</code> file, described in official documentation.</li> <li>Based on file meta-data, you can set document:<ul> <li>URL,</li> <li>creation/update date,</li> <li>document publication state,</li> <li>and some other less important. Most of these options, influence the SEO of the page build using MkDocs.</li> </ul> </li> </ol> <p>Probably you are now wondering why 2 quite different functionalities are placed in one plugin?</p> <p>The answer is not so obvious and a bit technical, but in bigger simplification, it's way simpler and less complex to bound those functionalities together. The main reason for that is how MkDocs internals work. For example, when navigation is built and when final HTML files are generated. Other example could be a document status implementation that influences navigation building, file list creation and <code>sitemap.xml</code> creation. This process should be considered as one functionality and splitting it over 2 separate plugins is possible, but it will not only increase code complexity, but also will increase significantly complexity of configuration since many settings used for automatic navigation building are the same for defining file meta-data. So, if we split functionality into 2 separate plugins, the final user (You) will have to maintain consistency in <code>mkdocs.yml</code> file. With a single plugin approach, we can reduce this problem to just maintaining a single point of configuration and settings validation.</p> <p>Important</p> <p>However, this plugin is not needed for other plugins to work correctly, it's highly recommended to use it.</p>"},{"location":"setup/general/pub-meta/#meta-data","title":"Meta-data","text":"<p>Markdown documents can contain additional metadata that is not rendered by MkDocs. This metadata is located at the beginning of the file (more information about this you can found in MkDocs documentation in Meta-Data section).</p> <p>MkDocs supports 2 main formats of meta-data:</p>  YAML_style.md MultiMarkdown_syle.md <p>It's preferred style since more plugins supports it and its the same format as in <code>mkdocs.yml</code> file. Also this format is supported by other tools (like Jekyll that is used in GitHub or GitLab)</p> <pre><code>---\ntitle: Your document title\ndescription: A short description of document content that encourage to read it\n---\nThis is the first paragraph of the document.\n</code></pre> <p>This style is NOT prefered since not all plugins and other tools supports it.</p> <pre><code>Title: Your document title\nDescription: A short description of document content that encourage to read it\n\nThis is the first paragraph of the document.\n</code></pre> <p>YAML front matter</p> <p>Since the YAML front matter format for meta-data is used by a wider set of other plugins and tools, this format will be used in this tool documentation.</p>"},{"location":"setup/general/pub-meta/#document-meta-data","title":"Document meta-data","text":"<p>As described in the previous section, you can provide additional meta-data that is unique for that document, and can change some behavior of the meta plugin, but not only. Some other MkDocs plugins also utilize these types of settings. One of the plugins is pub-blogor plugins included in Material for MkDocs.</p>"},{"location":"setup/general/pub-meta/#directory-meta-data","title":"Directory meta-data","text":"<p>The same approach can be taken for setting this up in the case of directories. To provide meta-data values, you have to create a file <code>README.md</code> inside the given directory and put the values accepted by this plugin. A list of possible settings can be found below.</p>"},{"location":"setup/general/pub-meta/#dates","title":"Dates","text":"<p>In the metadata, there is a possibility to add two values related to dates.</p> <code>date</code> <code>update</code> <p>This defines a value for the document's creation date. It's also used by a blog plugin for blog posts ordering and a meta plugin for updating a sitemap file.</p> <pre><code>---\ndate: 2023-05-19 15:40:36\n---\n</code></pre> <p>This defines a value for the document's last update date. It's also used by a meta plugin for updating a sitemap file.</p> <pre><code>---\nupdate: 2023-06-12 14:16:52\n---\n</code></pre> <p>Date format</p> <p>Currently, the date format is hard-coded and cannot be changed, and is defined according to Python date format codes and looks like this: <code>%Y-%m-%d %H:%M:%S</code> (example: <code>2023-06-12 14:16:52</code>).</p>"},{"location":"setup/general/pub-meta/#navigation-automatic-generation","title":"Navigation automatic generation","text":"<p>Warning</p> <p>If the meta plugin is enabled, document navigation is automatically created by the plugin. So if you have your navigation already created, you will have to set up the navigation in the way, how meta plugin is building it. Currently, this is the only way to provide functionality like single document or directories status.</p> <p>In short, navigation automatic generation works based on alphabetical order of files and directories. If you are using any IDE (like PyCharm, VsCode or Obsidian) for documents creation and editing, the way of file order you see by default in the project or file browser of the tool, is the order of the files in navigation. Probably the easiest way of file ordering is to provide some prefix with the digits (take a look at this documentation repository for better understanding). The main problem with this approach would be strange names in file URLs and documentation titles on the web page. To solve that problems, the meta plugin uses two meta-data values that are common for document files and directories:</p> <code>title</code><code>slug</code> <p><code>title</code> is responsible for document name that is visible in the generated web page.</p> <pre><code>---\ntitle: Document title\n---\n</code></pre> <p><code>slug</code> is responsible for document URL.</p> <pre><code>---\nslug: document-slug\n---\n</code></pre>"},{"location":"setup/general/pub-meta/#document-publication-status","title":"Document publication status","text":"<p>One of the functions provided by the meta plugin is a possibility to set document status. Each status has some implications for navigation building and links creation.</p>  published.md hidden.md  draft.md <pre><code>---\nstatus: published\n---\n</code></pre> <p>When the document status is set to <code>published</code>, the document will appear in navigation and link to it, will be visible on the generated web page.</p> <pre><code>---\nstatus: hidden\n---\n</code></pre> <p>When the document status is set to <code>hidden</code>, the document will not appear in navigation, but will be generated, and it's possible to create a link to this document or enter a direct URL address.</p> <pre><code>---\nstatus: draft\n---\n</code></pre> <p>When the document status is set to <code>draft</code>, the document will not appear in navigation and will not be generated. However, when using local document hosting by issuing the command <code>mkdocs serve</code>, each draft document will be generated to help with document creation and visual inspection.</p> <p>Default document status</p> <p>If status is not set for document, by default status is set to <code>draft</code>, so the document will not be published accidentally.</p>"},{"location":"setup/general/pub-meta/#directory-publication-status","title":"Directory publication status","text":"<p>Status can also be set for whole directories. This gives you a control over the whole set of documents that are placed in given directories. Each status has some implications for navigation building and links creation.</p>  README.md for published directory README.md for hidden directory  README.md for draft directory <pre><code>---\nstatus: published\n---\n</code></pre> <p>When the status is set to <code>published</code> in <code>README.md</code> file, the directory will appear in navigation and link to it and documents in this directory, will be visible on the generated web page.</p> <pre><code>---\nstatus: hidden\n---\n</code></pre> <p>When the status is set to <code>hidden</code> in <code>README.md</code> file, the directory will not appear in navigation, but documents in this directory will be generated and could be accessible by internal linking or by passing direct URL address in the web browser.</p> <pre><code>---\nstatus: draft\n---\n</code></pre> <p>When the status is set to <code>draft</code> in <code>README.md</code> file, the directory will not appear in navigation and documents in this directory will not be generated. However, when using local document hosting by issuing the command <code>mkdocs serve</code>, each directory and documents will be generated to help with document creation and visual inspection.</p> <p>Default directory status</p> <p>If status is not set for directory, by default status is set to <code>published</code>, so there is no need to create <code>README.md</code> file in each directory.</p>"},{"location":"setup/general/pub-meta/#configuration","title":"Configuration","text":"<p>To enable the built-in meta plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-meta\n</code></pre>"},{"location":"setup/general/pub-meta/#general","title":"General","text":"mkdocs.yml <pre><code>plugins:\n- pub-meta:\ndir_meta_file: README.md\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> dir_meta_file <p>File name containing metadata for directories. The default file name is <code>README.md</code> because this file name is used by GitHub and GitLab (the two most popular git repositories providers) as an index files for the directory. By using this name, this file ideally blends into git repository when the whole documentation is stored in one.</p>"},{"location":"setup/general/pub-meta/#slug","title":"Slug","text":"mkdocs.yml <pre><code>plugins:\n- pub-meta:\nslug:\nenable: true\nwarn_on_missing: true\nkey_name: status\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if slug metadata will be used while document URL is created while generating a web page.</p> warn_on_missing <p>MkDocs contains a switch for strict mode. This mode forces break of document generation on any warning and if this option is also enabled, it will force check of all documents, containing a <code>slug</code> key defined.</p> key_name <p>Metadata key name for slug value.</p>"},{"location":"setup/general/pub-meta/#status","title":"Status","text":"mkdocs.yml <pre><code>plugins:\n- pub-meta:\nstatus:\nsearch_in_hidden: false\nsearch_in_draft: false\nfile_default: draft\nfile_warn_on_missing: true\ndir_default: published\ndir_warn_on_missing: false\nkey_name: status\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> search_in_hidden <p>When Material for MkDocs search plugin is enabled, by default, all documents are indexed and searchable (even those that are hidden by this plugin). To exclude hidden files from being searchable, normally you would have to place an additional value in each hidden document. To make things easier for you, the meta plugin handles it for you, and all hidden documents, are excluded from search. You can change this behavior by changing this value.</p> search_in_draft <p>When Material for MkDocs search plugin is enabled, by default, all documents are indexed and searchable (even those that are draft by this plugin). To exclude draft files from being searchable, normally you would have to place an additional value in each draft document. To make things easier for you, the meta plugin handles it for you, and all draft documents, are excluded from search. You can change this behavior by changing this value.</p> file_default <p>Defines default status of publication for documents. More information about this, you can find on this page in the section document publication status.</p> file_warn_on_missing <p>MkDocs contains a switch for strict mode. This mode forces break of document generation on any warning and if this option is also enabled, it will force checking all documents, containing a <code>status</code> key defined.</p> dir_default <p>Defines default status of publication for directories. More information about this, you can find on this page in the section directory publication status.</p> dir_warn_on_missing <p>MkDocs contains a switch for strict mode. This mode forces break of document generation on any warning and if this option is also enabled, and it will force checking all directories (in fact <code>README.md</code> file in directory), containing a <code>status</code> key defined.</p> key_name <p>Metadata key name for status value.</p>"},{"location":"setup/general/pub-meta/#title","title":"Title","text":"mkdocs.yml <pre><code>plugins:\n- pub-meta:\ntitle:\nkey_name: title\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> key_name <p>Metadata key name for title value.</p> <p>Backlinks:</p> <p><p>- automatic documents navigation creation (pub-meta plugin -  v1.0.0),</p><p>- documents publication status with additional meta-data like URL names, etc. beneficial for SEO (pub-meta plugin -  v1.0.0),</p></p> Setting up a blog <p><p>   When pub-meta plugin is configured and the directory for blog posts is set up, there is nothing more left to be configured. All the things related to creating a navigation section will be handled automatically by the pub-meta plugin.</p></p>"},{"location":"setup/general/pub-blog/","title":"Setting up a blog plugin","text":""},{"location":"setup/general/pub-blog/#introduction","title":"Introduction","text":"<p>Publisher for MkDocs allows you to create a blog. A blog can be a sidecar for your current documentation, or it can be configured as a standalone. The entire blogging engine is created and preconfigured, so you can focus on content creation. It will handle creation of:</p> <ul> <li>indexes,</li> <li>archive,</li> <li>categories,</li> <li>tags,</li> <li>pagination.</li> </ul> <p>All the above documents are created outside <code>docs</code> directory, so they are not visible and do not interfere with your content.</p> <p>This documentation contains a blog that is created using this plugin, so you can take a look at a living example.</p> <p>Date format</p> <p>Currently, the date format of a blog posts is not configurable and has to look like this:</p> <pre><code>---\ndate: 2023-02-12 22:00:00\n---\n</code></pre> <p>There is also a requirement, that each blog post, have to contain an unique date because without this, the algorithm responsible for posts display ordering (from newest to oldest) will not work correctly.</p>"},{"location":"setup/general/pub-blog/#configuration","title":"Configuration","text":"<p>To enable the built-in obsidian blog, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog\n</code></pre> <p>By default, the blogging plugin assumes that blog posts are located inside <code>blog</code> subdirectory. You have to create this directory manually, so the directory structure will look like this:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>The last thing is to add a blog to a site navigation. There are 2 ways to do it:</p> Using pub-meta pluginAdd to existing site layout <p>When pub-meta plugin is configured and the directory for blog posts is set up, there is nothing more left to be configured. All the things related to creating a navigation section will be handled automatically by the pub-meta plugin.</p> <p>If an existing pages are created in MkDocs, it's simple to just add a blog functionality. To achieve it, Any name with path to a blog subdirectory name (by default it's a <code>blog</code>) has to be added to the <code>mkdocs.yml</code> file and blogging engine will handle everything else.</p>  mkdocs.yml <pre><code>nav:\n- ... # Previous navigation elements\n- Any name: blog\n- ... # Next navigation elements\n</code></pre> <p>Blog standalone mode</p> <p>Standalone mode (blog as a starting page) was removed in version v0.6.0 and now this is automatically detected, based on site navigation structure.</p>"},{"location":"setup/general/pub-blog/#general","title":"General","text":"mkdocs.yml <pre><code>plugins:\n- pub-blog:\nteaser_marker: `&lt;!-- more --&gt;`\nsearchable_non_posts: false\nposts_per_page: 5\nslug: blog\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> teaser_marker <p>This option gives you an ability to split a blog posts that are a massive chunk of text into two parts: blog post teaser visible on blog posts index page and the full article. To split the blog post, you have to put a <code>&lt;!-- more --&gt;</code> in some line inside a content of your blog post. This value is a valid HTML comment, so it will not be rendered.</p> posts_per_page <p>When you gather over time some amount of blog posts, their index even with short teasers, they can take quite much space over a single page and scrolling down is not a convenient solution. To avoid this, blogging engine allows splitting index pages when they contain a certain amount of blog posts.</p> searchable_non_posts <p>This option controls the behavior of a search plugin for all dynamically created blog documents that are not blog posts. There is no need to make those pages visible, since all the text in those pages is a copy of the part of the blog post.</p> slug <p>This option gives you an ability to go to specify your blog direct URL, like <code>https://yourblog.com/blog/</code>. The <code>blog</code> part of the URL can be configured to a non-standard value.</p>"},{"location":"setup/general/pub-blog/#directories","title":"Directories","text":"<p>This plugin to work correctly, needs to create and/or use some directories. Those settings should be considered as advanced and for day to day use, you should not change them.</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\ntemp_dir: .temp\narchive_subdir: archive\ncategories_subdir: categories\ntags_subdir: tags\n</code></pre> <p>Temporary directory is created at the same level as main <code>docs</code> directory and <code>mkdocs.yml</code> configuration file.</p> <pre><code>.\n\u251c\u2500 .temp/\n\u2502  \u251c\u2500 archive/\n\u2502  \u251c\u2500 categories/\n\u2502  \u2514\u2500 tags/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> temp_dir <p>Temporary directory is used by a blog engine to create an index files with a blog post teasers and other files like a list of archive, categories, and tags pages.</p> archive_subdir <p>Archive subdirectory is used to store dynamically generated documents that contain archive indexes.</p> categories_subdir <p>Categories subdirectory is used to store dynamically generated documents that contain categories indexes.</p> tags <p>Tags subdirectory is used to store dynamically generated documents that contain tags indexes.</p>"},{"location":"setup/general/pub-blog/#language","title":"Language","text":"<p>By default, the blogging plugin is set to use English (<code>en</code>) translation. Currently, available languages:</p> <ul> <li><code>en</code> - English,</li> <li><code>pl</code> - Polish.</li> </ul> <p>To set up one of the above languages, the following line has to be added to the <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugin:\n- pub-blog:\nlang: 'pl'\n</code></pre>"},{"location":"setup/general/pub-blog/#translation","title":"Translation","text":"<p>If there is no language that suits you best, you can translate part of the interface by providing values for the below keys inside the configuration <code>mkdocs.yml</code> files. Providing those values overrides values for setup of a given language, and this way it's possible to change only some of them.</p> <p>Below, you can find a list of settings keys with English values that allow to translate some parts of the interface:</p>  mkdocs.yml <pre><code>plugins:\npub-blog:\ntranslation:\nteaser_link_text: Read more\nblog_page_title: Blog\nblog_navigation_name: Blog\nrecent_blog_posts_navigation_name: Recent posts\narchive_page_title: Archive\narchive_navigation_name: Archive\ncategories_page_title: Category\ncategories_navigation_name: Categories\ntags_page_title: Tag\ntags_navigation_name: Tags\nnewer_posts: Newer posts\nolder_posts: Older posts\n</code></pre> <p>Backlinks:</p> <p><p>- creating a blog posts with automatic build of archive, categories, tags, and index pages (pub-blog plugin),</p></p> Setting up meta <p><p>As described in the previous section, you can provide additional meta-data that is unique for that document, and can change some behavior of the meta plugin, but not only. Some other MkDocs plugins also utilize these types of settings. One of the plugins is pub-blogor plugins included in Material for MkDocs.</p><p>   This defines a value for the document's creation date. It's also used by a blog plugin for blog posts ordering and a meta plugin for updating a sitemap file.</p></p>"},{"location":"setup/general/pub-obsidian/","title":"Setting up Obsidian","text":""},{"location":"setup/general/pub-obsidian/#introduction","title":"Introduction","text":"<p>When you want to create some documentation, you need some tools that will help you with writing it. There are multiple ways of achieving it and one of them is to write documentation using flat files using Markdown syntax. This syntax is utilized not only by MkDocs, but also by other tools like Obsidian. In general, Obsidian is a note-taking app, but because it's a very flexible tool, it's quite often used for creating Personal Knowledge Management or a Second Brain.</p> <p>Obsidian introduces some additional Markdown syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. Those internal links, in Obsidian, give you additional functionality of an automatic backlinks that just create a link to a document that mentions the document you are now reading. This way, you can have a better understanding of the relation in between 2 documents or topics that are described in them. If you want to know how the backlinks looks like, take a look at the bottom of this page.</p> <p>Also, Obsidian has a huge variety of additional plugins, that allow to add some additional elements to the document, like charts, etc. Currently, the obsidian plugin, supports:</p> <ul> <li>Vega charts plugin - this plugin allows for adding Vega Charts.</li> </ul> <p>Support for more plugins is coming soon.</p>"},{"location":"setup/general/pub-obsidian/#creating-obsidian-vault","title":"Creating Obsidian Vault","text":"<p>The most important thing if you want to use Obsidian as an IDE for creating a documentation, you have to create an Obsidian Vault inside a <code>docs</code> directory.</p> <p>When the vault is created, inside <code>docs</code> directory, there will be created an <code>.obsidian</code> directory. This directory contains some Obsidian files with the app settings, additional files, etc.</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 .obsidian/\n\u2514\u2500 mkdocs.yml\n</code></pre> <p><code>.obsdian</code> directory</p> <p>This directory can contain some crucial information, like paid Obsidian plugins credentials, etc. If you are using any git repository for storing your documentation, consider adding this directory into .gitignore to avoid potential security problems.</p> <p>Do not remove this directory because you will lose your vault settings.</p>"},{"location":"setup/general/pub-obsidian/#obsidian-templates","title":"Obsidian templates","text":"<p>One of the benefits of using Obsidian, is the possibility to define and use templates for the whole document structure or parts of the document. To make use of the templates, you have create a template directory in <code>docs</code> directory and then set up the template plugin in Obsidian with the same template directory. By default, this directory name is set to <code>_templates</code>.</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 .obsidian/\n|  \u2514\u2500 _templates/\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"setup/general/pub-obsidian/#configuration","title":"Configuration","text":"<p>To enable the built-in obsidian plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-obsidian\n</code></pre>"},{"location":"setup/general/pub-obsidian/#general","title":"General","text":"mkdocs.yml <pre><code>plugins:\n- pub-obsidian:\nobsidian_dir: .obsidian\ntemplates_dir: _templates\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> obsidian_dir <p>Defines the name of an Obsidian directory, where all the setting files are stored.</p> templates_dir <p>Defines the name of an Obsidian directory, where all the note templates files are stored.</p>"},{"location":"setup/general/pub-obsidian/#backlinks","title":"Backlinks","text":"mkdocs.yml <pre><code>plugins:\n- pub-obsidian:\nbacklinks:\nenabled: true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if backlinks are generated on the document web page.</p>"},{"location":"setup/general/pub-obsidian/#callouts","title":"Callouts","text":"mkdocs.yml <pre><code>plugins:\n- pub-obsidian:\ncallouts:\nenabled: true\nindentation: spaces\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if callouts are generated on the document web page.</p> indentation <p>Defines if callout indentation whitespace type. Possible values: <code>spaces</code> (default) or <code>tabs</code>.</p>"},{"location":"setup/general/pub-obsidian/#links","title":"Links","text":"mkdocs.yml <pre><code>plugins:\n- pub-obsidian:\nlinks:\nwikilinks_enabled: true\nimg_lazy: true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> wikilinks_enabled <p>Control if WikiLinks format is supported.</p> img_lazy <p>Controls if all images should be lazy loaded. By default, this setting is enabled because it helps with SEO. However, you can disable this option and add set it up for each image separately.</p>"},{"location":"setup/general/pub-obsidian/#vega-charts","title":"Vega charts","text":"mkdocs.yml <pre><code>plugins:\n- pub-obsidian:\nvega:\nenabled: true\nvega_schema: https://vega.github.io/schema/vega/v5.json\nvega_lite_schema: https://vega.github.io/schema/vega-lite/v5.json\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Controls if Vega charts are supported and will be rendered.</p> vega_schema <p>Link to JSON file with Vega scheme.</p> vega_lite_schema <p>Link to JSON file with Vega-lite scheme.</p> <p>Backlinks:</p> <p><p>- integration with Obsidian.md as documentation editor with support for some Markdown syntax specific to it and some plugins (pub-obsidian plugin  v1.0.0):</p></p> v1.0.0 - 2023-06-13 <p><p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p></p>"},{"location":"setup/seo-and-sharing/pub-social/","title":"Setting up social cards plugin","text":""},{"location":"setup/seo-and-sharing/pub-social/#introduction","title":"Introduction","text":"<p>When you are a blogger or a person who wants to publish some documentation, book or any other piece of written text, you probably also want to share it over social media. Most platforms (like Facebook, LinkedIn, etc.) uses some web page metadata called Open Graph. Twitter is using part of this data and some additional metadata called Twitter Cards. No matter if you want to share your text with Facebook or Twitter, MkDocs Publisher is here to help you with this task and is doing it (almost) fully automatically. You don't have to edit any template like it's needed when you would like to use similar functionality from Material for MkDosc theme (at least it's true for <code>v9.1.5</code>). At this time (MkDocs Publisher <code>v0.5.0</code>) it's not possible to auto-generate a whole social card (this task is added to the backlog). However, it's possible to add your image as a preview with additional description, etc.</p>"},{"location":"setup/seo-and-sharing/pub-social/#document-metadata","title":"Document metadata","text":"<p>More about document metadata you can read in the document related to setting up the meta plugin.</p> <p>Some data used by social cards is global (like site name) but some are unique per document. Data needed and optional that is needed by social card is:</p> <ul> <li>(required)<code>title</code> - document title (30\u201365 characters),</li> <li>(required) <code>description</code> - short document description (120\u2013350 characters),</li> <li>(optional) <code>image</code> - link to an image (1200\u00d7630 pixels).</li> </ul>  example.md <pre><code>---\ntitle: Your document title\ndescription: A short description of document content that encourage to read it\nimage: /some/url/to/an/image.jpg\n---\n</code></pre> <p>Warning</p> <p>If any of the required key is missing, social card will not be included in a web page.</p>"},{"location":"setup/seo-and-sharing/pub-social/#configuration","title":"Configuration","text":"<p>To enable the built-in social cards plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social\n</code></pre>"},{"location":"setup/seo-and-sharing/pub-social/#open-graph-cards","title":"Open Graph cards","text":"mkdocs.yml <pre><code>plugins:\n- pub-social:\nog:\nenabled: true\nlocale: en_us\n</code></pre> enabled <p>This option gives you an ability to enable or disable an Open Graph cards.</p> locale <p>This option gives you an ability to set a locale of an Open Graph cards. There is a limited set of possible values.</p>"},{"location":"setup/seo-and-sharing/pub-social/#twitter-cards","title":"Twitter cards","text":"mkdocs.yml <pre><code>plugins:\n- pub-social:\ntwitter:\nenabled: true\nwebsite: @website\nauthor: @author\n</code></pre> enabled <p>This option gives you an ability to enable or disable a Twitter Cards.</p> website <p>This option gives you an ability to add a Twitter website account name.</p> author <p>This option gives you an ability to add a Twitter author account name.</p>"},{"location":"setup/seo-and-sharing/pub-social/#metadata-keys-names","title":"Metadata keys names","text":"<p>You can change a name of the keys used to store metadata used to create social cards.</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\nmeta_keys:\ntitle_key: title\ndescription_key: description\nimage_key: image\n</code></pre> title_key <p>This option gives you an ability to change a metadata title key used to create a social card.</p> description_key <p>This option gives you an ability to change a metadata description key used to create a social card.</p> image_key <p>This option gives you an ability to change a metadata image key used to create a social card.</p> <p>Backlinks:</p> <p><p>- social cards metadata creation based on document metadata (pub-social plugin -  v0.5.0),</p></p> v0.5.0 - 2023-04-04 <p><p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p></p>"},{"location":"setup/seo-and-sharing/pub-minifier/","title":"Setting up a minifier plugin","text":""},{"location":"setup/seo-and-sharing/pub-minifier/#introduction","title":"Introduction","text":"<p>Even today, when most of us have quite fast internet connection, page size still matters to over feeling of fast page load and as one of the factors of SEO. For that reason, a good publishing tool, should allow optimizing image size and (less important) page code size optimization. Publisher for MkDocs has that ability, but it does not introduce new optimization algorithms, etc. It's using tools that are created by others and considered stable with a good performance, etc.</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#installation","title":"Installation","text":"<p>To simplify the entire process, below is presented a single way of installation of all the tools. If you just want to use a single tool or learn more about what tool is used for what type of file, please take a look below for a configuration section where it's described.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page.</p>  All PNG JPEG SVG HTML CSS JS <pre><code>brew install pngquant oxipng mozjpeg node\nnpm install -f --no-fund svgo html-minifier postcss cssnano postcss-svgo postcss-cli uglify-js\n</code></pre> <pre><code>brew install pngquant oxipng\n</code></pre> <pre><code>brew install mozjpeg\n</code></pre> <pre><code>brew install node\nnpm install -f --no-fund svgo\n</code></pre> <pre><code>brew install node\nnpm install -f --no-fund html-minifier\n</code></pre> <pre><code>brew install node\nnpm install -f --no-fund postcss cssnano postcss-svgo postcss-cli\n</code></pre> <pre><code>brew install node\nnpm install -f --no-fund uglify-js\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page.</p>  All PNG JPEG SVG HTML CSS JS <pre><code>scoop bucket add main\nscoop install pngquant oxipng mozjpeg nodejs\nnpm install -f --no-fund svgo html-minifier postcss cssnano postcss-svgo postcss-cli uglify-js\n</code></pre> <pre><code>scoop install pngquant oxipng\n</code></pre> <pre><code>scoop install mozjpeg\n</code></pre> <pre><code>scoop install nodejs\nnpm install -f --no-fund svgo\n</code></pre> <pre><code>scoop install nodejs\nnpm install -f --no-fund html-minifier\n</code></pre> <pre><code>scoop install nodejs\nnpm install -f --no-fund postcss cssnano postcss-svgo postcss-cli\n</code></pre> <pre><code>scoop install nodejs\nnpm install -f --no-fund uglify-js\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>.</p>  All PNG JPEG SVG HTML CSS JS <pre><code>sudo apt update\nsudo apt install -y rustc pngquant libjpeg-turbo-progs nodejs\ncargo install oxipng\nnpm install --no-fund -f svgo html-minifier postcss cssnano postcss-svgo postcss-cli uglify-js\n</code></pre> <pre><code>sudo apt update\nsudo apt install -y rustc pngquant\ncargo install oxipng\n</code></pre> <pre><code>sudo apt update\nsudo apt install -y libjpeg-turbo-progs\n</code></pre> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install --no-fund -f svgo\n</code></pre> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install --no-fund -f html-minifier\n</code></pre> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install --no-fund -f postcss cssnano postcss-svgo postcss-cli\n</code></pre> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install --no-fund -f uglify-js\n</code></pre>"},{"location":"setup/seo-and-sharing/pub-minifier/#configuration","title":"Configuration","text":"<p>To enable the built-in optimization plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-minifier\n</code></pre> <p>Just like that, all optimization tools are enabled with optimal settings (according to my small experiments).</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#general","title":"General","text":"<p>Advanced settings</p> <p>In day to day usage, those settings should be considered as advanced and probably shouldn't be changed. Those options are exposed, so you can adjust some settings offered by a given tool, but you should test those options locally.</p>  mkdocs.yml <pre><code>plugins:\n- pub-minifier:\nthreads: 0\ncache_dir: .cache\ncache_file: .cache_files_list.yml\n</code></pre> <p>By default, this directory is created on the same level as <code>docs</code> directory and the directory structure looks like this:</p> <pre><code>    .\n    \u251c\u2500 .cache/\n    \u2502  \u2514\u2500 .cache_files_list.yml\n    \u251c\u2500 docs/\n    \u2514\u2500 mkdocs.yml\n</code></pre> threads <p>File optimization process is a CPU intensive. Most modern computers have processors with multiple CPU cores. Each core can be used to optimize a single file. When your machine has more than one CPU core, it's good to have an ability to utilize all of them during the optimization process because it will reduce overall time needed for optimization of all files. This setting defines how many CPUs the plugin will use for file optimization process. If set to 0 (default value) the plugin will read the number of available CPUs from system settings.</p> cache_dir <p>When <code>pub-minifier</code> plugin is enabled, caching is enabled by default and cannot be turned off. Caching is quite crucial since image optimization is quite a time-consuming process (especially for PNG files). This setting defines the directory location, where the cached files are stored.</p> cache_file <p>Defines the name of the file, where all the data needed for proper cache working is stored. When this file is missing or corrupt, it and all cached files will be recreated. This file is stored inside the cache directory, and by default, the directory structure looks like this:</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#jpeg-optimization","title":"JPEG optimization","text":"<p>JPEG image file size optimizations are done using MozJPEG tool. As we can read on the project website:</p> <p>MozJPEG</p> <p>MozJPEG improves JPEG compression efficiency, achieving higher visual quality and smaller file sizes at the same time. It is compatible with the JPEG standard, and the vast majority of the world's deployed JPEG decoders.</p> <p>Using this tool reduces JPEG image file size up to 30% with almost no visible quality degradation. You can always try to change it by modification of default settings. Please have in mind that default values were set after my personal experiments and not always can be the most optimal one.</p> <pre><code>plugins:\n- pub-minifier:\njpeg:\nenabled = true\nenabled_on_serve = false\ndjpeg_path = djpeg\ncjpeg_path = cjpeg\njpegtran_path = jpegtran\noptimise = true\nprogressive = true\ncopy_meta = none\nsmooth = 10\nquality = 85\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if JPEG minifier is enabled.</p> enabled_on_serve <p>Control if JPEG minifier is enabled while page is being served locally (mostly used for content creation).</p> djpeg_path <p>Path to <code>djpeg</code> tool (part of MozJPEG package).</p> cjpeg_path <p>Path to <code>cjpeg</code> tool (part of MozJPEG package).</p> jpegtran_path <p>Path to <code>jpegtran</code> tool (part of MozJPEG package).</p> optimise <p>Optimize Huffman table (smaller file, but slow compression).</p> progressive <p>Create progressive JPEG file.</p> copy_meta <p>Defines what metadata to copy: <code>none</code>, <code>comments</code>, <code>icc</code> or <code>all</code>.</p> smooth <p>Level of image smoothness: <code>0</code>(disabled, smallest) - <code>100</code>(biggest) [default: <code>10</code>].</p> quality <p>Level of compression: <code>0</code>(disabled, worst) - <code>100</code> (best) [default: <code>85</code>].</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#png-optimization","title":"PNG optimization","text":"<p>PNG image file size optimizations are done using a combination of 2 tools:</p> <ol> <li>pngquant - this is a tool that reduces PNG file size by changing a color palette and alpha channel. Despite those optimizations, generated images are compatible with all web browsers and operating systems.</li> <li>oxipng - this is a tool that reduces PNG file size by a lossless optimized compression algorithm.</li> </ol> <p>Using those tools together, can reduce PNG image file size by up to 70% with almost no visible quality degradation. You can always try to change it by modifying of default settings. Please have in mind that default values were set after my personal experiments and not always can be the most optimal one.</p> <pre><code>plugins:\n- pub-minifier:\npng:\nenabled = true\nenabled_on_serve = false\npngquant_enabled = true\npngquant_path = ongquant\npngquant_speed = 1\npngquant_quality = 95\noxipng_enabled = true\noxipng_path = oxipng\noxipng_max_compression = true\nstrip = true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if PNG minifier is enabled.</p> enabled_on_serve <p>Control if PNG minifier is enabled while page is being served locally (mostly used for content creation).</p> pngquant_enabled <p>Control if pngquant tool is enabled.</p> pngquant_path <p>Path to <code>pnquant</code> tool.</p> pngquant_speed <p>Compression speed: <code>1</code> (slow but best quality) - <code>12</code> (fast but rough) [default: <code>1</code>].</p> pngquant_quality <p>Image quality: <code>0</code> (worst) - <code>100</code> (best) [default: <code>95</code>]</p> oxipng_enabled <p>Control if oxipng tool is enabled.</p> oxipng_path <p>Path to <code>oxipng</code>.</p> oxipng_max_compression <p>Use max possible compression.</p> strip <p>Strip metadata from file.</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#svg-optimization","title":"SVG optimization","text":"<p>SVG vector image file size optimizations are done using SVGO tool. This is a Node.js-based tool. As we can read on the project website:</p> <p>SVGO</p> <p>SVG files, especially those exported from various editors, usually contain a lot of redundant and useless information. This can include editor metadata, comments, hidden elements, default or non-optimal values and other stuff that can be safely removed or converted without affecting the SVG rendering result.</p> <p>Using this tool reduces SVG vector image file size by up to 70% with no visible quality degradation. This tool has multiple plugins that impact the effectiveness of an optimization. At this time, the <code>pub-minifier</code> plugin doesn't allow changing the default settings of used SVGO plugins.</p> <pre><code>plugins:\n- pub-minifier:\nsvg:\nenabled = true\nenabled_on_serve = false\nsvgo_path = svgo\nmultipass = true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if SVG minifier is enabled.</p> enabled_on_serve <p>Control if SVG minifier is enabled while page is being served locally (mostly used for content creation).</p> svgo_path <p>Path to <code>svgo</code> tool.</p> multipass <p>Do multiple passes during compression to ensure all optimizations are apllied.</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#html-optimization","title":"HTML optimization","text":"<p>HTML file size optimizations are done using html-minifier tool. This is a Node.js-based tool. As we can read on the project website:</p> <p>HTMLMinifier</p> <p>HTMLMinifier\u00a0is a highly\u00a0configurable,\u00a0well-tested, JavaScript-based HTML minifier.</p> <p>Using this tool reduces HTML file size by up to 30%. You can always try to change it by modification of default settings. Please have in mind that default values were set after my personal experiments and not always can be the most optimal one.</p> <pre><code>plugins:\n- pub-minifier:\nhtml:\nenabled = true\nenabled_on_serve = false\npostcss_path = postcss\ncase_sensitive = true\nminify_css = true\nminify_js = true\nremove_comments = true\nremove_tag_whitespace = false\ncollapse_whitespace = true\nconservative_collapse = true\ncollapse_boolean_attributes = true\npreserve_line_breaks = true\nsort_attributes = true\nsort_class_name = true\nmax_line_length = 1024\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if HTML minifier is enabled.</p> enabled_on_serve <p>Control if HTML minifier is enabled while page is being served locally (mostly used for content creation).</p> html_minifier_path <p>Path to <code>html-minifier</code> tool.</p> case_sensitive <p>Treat attributes in case sensitive manner.</p> minify_css <p>Minify CSS that is inside HTML (using <code>celan-css</code>)</p> minify_js <p>Minify JS that is inside HTML (using <code>uglify-js</code>).</p> remove_comments <p>Strip HTML comments.</p> remove_tag_whitespace <p>Remove space between attributes whenever possible.</p> Danger !!! <p>Enabling this setting may lead to problems with code blocks, etc.</p> collapse_whitespace <p>Collapse white space that contributes to text nodes in a document tree.</p> conservative_collapse <p>Always collapse to 1 space (never remove it entirely).</p> collapse_boolean_attributes <p>Omit attribute values from boolean attributes.</p> preserve_line_breaks <p>Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.</p> sort_attributes <p>Sort attributes by frequency.</p> sort_class_name <p>Sort style classes by frequency.</p> max_line_length <p>Define max line length after optimization: <code>80</code> - <code>4096</code> [default: <code>1024</code>].</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#css-optimization","title":"CSS optimization","text":"<p>CSS file size optimizations are done using PostCSS tool and some plugins:</p> <ul> <li>PostCSS CLI - this is a Command Line Interface for this tool,</li> <li>cssnano - compression tool plugin,</li> <li>postcss-svgo - inline SVG files optimization plugin using an SVGO tool (the same we are using for an SVG file optimization){ #02-setting-up-minifiersvg-optimization }.</li> </ul> <p>This is a Node.js based tool. As we can read on the project website:</p> <p>CSSnano</p> <p>CSSnano takes your nicely formatted CSS and runs it through many focused optimisations, to ensure that the final result is as small as possible for a production environment.</p> <p>Using this tool reduces CSS file size by up to 30%. At this time, the <code>pub-minifier</code> plugin doesn't allow changing the default settings of cssnano.</p> <pre><code>plugins:\n- pub-minifier:\ncss:\nenabled = true\nenabled_on_serve = false\npostcss_path = postcss\nskip_minified = true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if CSS minifier is enabled.</p> enabled_on_serve <p>Control if CSS minifier is enabled while page is being served locally (mostly used for content creation).</p> postcss_path <p>Path to <code>postcss</code> tool.</p> skip_minified <p>Skip files that are already minified (usually one with <code>.min.css</code> extension).</p>"},{"location":"setup/seo-and-sharing/pub-minifier/#js-optimization","title":"JS optimization","text":"<p>JS file size optimizations are done using UglifyJS tool. This is a Node.js-based tool. As we can read on the project website:</p> <p>UglifyJS</p> <p>UglifyJS is a JavaScript parser, minifier, compressor and beautifier toolkit.</p> <p>Using this tool reduces JS file size by up to 20%. At this time, the <code>pub-minifier</code> plugin doesn't allow changing the default settings.</p> <pre><code>plugins:\n- pub-minifier:\njs:\nenabled = true\nenabled_on_serve = false\nuglifyjs_path = uglifyjs\nskip_minified = true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Control if JS minifier is enabled.</p> enabled_on_serve <p>Control if JS minifier is enabled while page is being served locally (mostly used for content creation).</p> uglifyjs_path <p>Path to <code>uglifyjs</code> tool.</p> skip_minified <p>Skip files that are already minified (usually one with <code>.min.js</code> extension).</p> <p>Backlinks:</p> <p><p>- file size optimizations, that is beneficial for site download speed and SEO (pub-minifier plugin -  v0.4.0),</p></p>"},{"location":"setup/development/pub-debugger/","title":"Setting up a debugger plugin","text":""},{"location":"setup/development/pub-debugger/#introduction","title":"Introduction","text":"<p>Each good developer knows, how important is the possibility to read proper logs from running application when there is some issue. MkDocs by default produces some logs while documentation is being built or while the built-in server is running. Because the whole MkDocs is written using the Python programming language, there is a possibility to configure a debugger in tools like PyCharm or VsCode. But how to handle logging when you are just a user and do not have a needed knowledge and just want to submit an issue because you have found some problem? To help with debugging by logging and producing additional files that can be attached to the issue submission, Publisher for MkDocs contains a <code>pub-debugger</code> plugin. It's built with 3 main modules:</p> <ul> <li>console logger that allows to change the output produced to the console,</li> <li>file logger that allows to produce the log file,</li> <li>Zip file generator that allows to produce a Zip file with log file produced by previous module and some additional files like <code>mkdocs.yml</code> and Python package files like <code>requirements.txt</code> or <code>pyproject.tml</code> and <code>poetry.lock</code> (depends on type of Python package manager you have used).</li> </ul> <p>Console and file logger settings</p> <p>Both console and file loggers are configured separately and their defaults settings are different.</p> <p>Privacy disclaimer</p> <p><code>pub-debugger</code> plugin do not send any files over the internet, but if you want to use a Zip file as an attachment for an issue submission or share it with anybody, before please make a review of the content of this archive file.</p> <p>Please remember</p> <p>It's your data and your responsibility what you are publishing over the internet. This plugin is only giving you the tool that should help, and you cannot blame me (the author of this plugin) for any potential data leaks.</p>"},{"location":"setup/development/pub-debugger/#python-logging-for-mkdocs","title":"Python logging for MkDocs","text":"<p>Information</p> <p>This section is for any MkDocs plugin developer.</p> <p>Because MkDocs is written in Python, whenever someone wants to write a new plugin and see some information during documentation build, he has to use a logging library. The usual use of this library is to do something like this:</p>  new_mkdocs_plugin.py <pre><code>import logging\nlogger = logging.get_logger(__name__)\nlogger.info(\"Some output\")\n</code></pre> <p>The biggest problem with this approach is that <code>__name__</code> becomes a file name (without extension), so the logger for the above example is <code>new_mkdocs_plugin</code>. Since all loggers inside MkDocs have a name corresponding to a directory structure that leads to the file where logger is used, any MkDocs plugin developer should do the same.</p> <p>The best practice for logger naming</p> <p>Logger name should be built according to given structure:</p> <p><code>mkdocs.plugins.[project_name].[directory].[optional_sub_directories].[file_name]</code>.</p> <p>Let's take a look at one of the files from this project repository.</p>  minifier.py <pre><code>import logging\n...\nlog = logging.getLogger(\"mkdocs.plugins.publisher.minifier.minifiers\")\n</code></pre> <pre><code>.\n\u2514\u2500 mkdocs_publisher/\n  \u2514\u2500 minifier/\n    \u2514\u2500 minifiers.py\n</code></pre>"},{"location":"setup/development/pub-debugger/#configuration","title":"Configuration","text":"<p>To enable the built-in debugger plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-debugger\n</code></pre>"},{"location":"setup/development/pub-debugger/#console-logging","title":"Console logging","text":"<p>By default, MkDocs produces a console log, that contains only basic information like log level and log message. In normal usage, this information is quite sufficient, but when any problem with a build process occurs, it's quite hard to find a specific line where the problem has happened. Because of that, <code>pub-debugger</code> allows you to override the default console logger with one that contains more information. Below you can find what does it look like:</p> <p></p> <p>Code link</p> <p>Be aware, that the above screenshot is the most future rich output. The default plugin configuration doesn't enable the code link section (it has to be enabled).</p>  mkdocs.yml <pre><code>plugins:\n- pub-debugger:\nconsole_log:\nenabled: true\nlog_level: INFO\nshow_code_link: false\nshow_logger_name: true\nshow_entry_time: true\nentry_time_format: \"%H:%M:%S.%f\"\nfilter_logger_names: []\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Controls if console log will be replaced with a new, richer format.</p> log_level <p>Set the log level.</p> show_code_link <p>Controls if the code link part is visible in the log message (useful for IDE like PyCharm).</p> show_logger_name <p>Controls if the logger name part is visible in the log message (useful when you want to filter some of the messages or plugins).</p> show_entry_time <p>Controls if the time entry part is visible in the log message.</p> entry_time_format <p>Defines time format.</p> filter_logger_names <p>Define a list of logger names that will be filtered out of the log messages.</p>"},{"location":"setup/development/pub-debugger/#file-logging","title":"File logging","text":"mkdocs.yml <pre><code>plugins:\n- pub-debugger:\nfile_log:\nenabled: true\nlog_level: DEBUG\nlog_format: \"[%(created).14s][%(levelname)-5.5s][%(project_path)s:%(lineno)d] %(message)s\"\nremove_old_files: true\nfilter_logger_names: []\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Controls if log file will be created.</p> log_level <p>Set the log level.</p> log_format <p>Defines format of the message that will be put into the log file.</p> remove_old_files <p>Controls if previously created log files will be removed while creating a new one.</p> filter_logger_names <p>Define a list of logger names that will be filtered out of the log messages.</p>"},{"location":"setup/development/pub-debugger/#zip-file-generation","title":"Zip file generation","text":"mkdocs.yml <pre><code>plugins:\n- pub-debugger:\nzip_log:\nenabled: true\nremove_old_files: true\nadd_pip_freeze: true\n</code></pre> <p>Above you can find all possible settings with their default values. You don't have to provide them. Just use them if you want to change some settings. The description of the meaning of given setting, you can find below.</p> enabled <p>Controls if zip file will be created.</p> remove_old_files <p>Controls if previously created zip files will be removed while creating a new one.</p> add_pip_freeze <p>Controls if zip file will contain a <code>requirements.txt</code> file with a list of Python libraries (it's helpful with issue reproduction when you want to report one).</p> <p>Backlinks:</p> <p><p>- debugger and logging on steroids - useful for issue reporting and for MkDocs plugin development (pub-debugger plugin  v1.1.0).</p></p> v1.1.0 - 2023-09-01 <p><p>Here I am with a new version of Publisher for MkDocs plugins. I have promised to make smaller releases, but my brain is refusing me to work on a small scale. It's really hard to achieve that, especially when I started to have some feedback from you, users of this tool. Because of that feedback and some problems you encountered, I decided to focus in this release on 2 main topics: some bug fixing and introducing a new plugin called pub-debugger. This plugin allows for an insight into all messages produced by plugins while building (or serving) a web page. Also, it's able to produce a ZIP file, with some basic information that could help me, whenever you will need to report an issue.</p><p>-  logger names unification - it's related to pub-debugger plugin</p></p> Changelog <p><p>-  logger names unification - it's related to pub-debugger plugin</p></p>"},{"location":"how-to-publish/first-steps/","title":"First steps","text":"<p>This section is in backlog.</p> <p>Currently, please take a look at installation and each plugin configuration section of this documentation.</p>"},{"location":"blog/v010/","title":"v0.1.0 - Initial release","text":"<p>Another blogging plugin for MkDocs? But why?</p> <p>The simplest answer is: because I couldn't find one good enough (and free).</p> <p>The flip side of the same coin was that I wanted to migrate my personal blog related to testing (sorry only in Polish, but you can try to use Google translator) from Nikola that works quite well, but sometimes is overly complicated, has almost none search functionality and markdown files are not the default one (but it's possible to use them). Why does the Markdown format is so important? Because I love Obsidian as a tool for gathering knowledge, and this format is a crucial part of that tool.</p> <p>At the time when this plugin was created, there was no free and good alternatives. The only one that could be good enough was hidden behind a paid wall and was a part of a theme Material for MkDocs. Some of the ideas for this plugin and functionalities came from documentation of the Material for MkDocs theme, Nikola and other plugins.</p> <p>Existing alternatives (with my comment):</p> <ul> <li>Material for MkDocs - complex solution, but paid,</li> <li>mkdocs-blogging-plugin - works, but simple solution for simple blog (limited tags usage, theme files modification needed, limited use of frontmatter, limited number of features),</li> <li>mkdocs-blog-plugin - no longer maintained and simple,</li> <li>python-mkblog - no longer maintained and simple,</li> <li>mkdocs-blog - no longer maintained and simple,</li> <li>material theme modification - it's not a plugin, but a complete theme modification, it's hard to extend and configure.</li> </ul> <p>As you can see, there are just 2 still maintained plugins for blogging in MkDocs:</p> <ol> <li>Material for MkDocs - complex but paid,</li> <li>mkdosc-blogging-plugin - much simpler than Material for MkDocs and a bit hacky due to mostly tricks in the template.</li> </ol>","tags":["v0.x"]},{"location":"blog/v010/#changelog","title":"Changelog","text":"<p>This project is now at an early stage of development. Current functionalities are:</p> <ul> <li> blog post update date based on metadata (post YAML frontmatter)</li> <li> blog post URL link based on metadata (post YAML frontmatter)</li> <li> blog post tags and categories based on metadata (post YAML frontmatter)</li> <li> support for blog post teaser</li> <li> auto generation of blog posts navigation</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> <p><p>Publisher for MkDocs is a set of plugins for MkDocs that was created originally as \u201cyet another blogging plugin for MkDocs\u201d (you can read more about this in this blog post). During a process of development, I realized that it can become something more that will help not only me with blog creation, but also as a part of a wider publishing tool. Documents creation can be used with cooperation with an Obsidian.md that is a tool for creating a second brain and also an excellent Markdown files editor.</p></p>","tags":["v0.x"]},{"location":"blog/v020/","title":"v0.2.0 - 2023-02-19","text":"<p>The main focus in this release is around making it a valid python package that can be published and to adding some additional functionalities around retrieving additional information from frontmatter.</p>","tags":["v0.x"]},{"location":"blog/v020/#changelog","title":"Changelog","text":"<p>Further development of blog plugin:</p> <ul> <li> sub-pages for archive, categories, blog</li> <li> configurable blog posts pagination with page navigation</li> <li> interface language change: EN and PL (help wanted with more languages)</li> <li> possibility to override for all interface text elements</li> <li> valid python package at pypi.org</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p>","tags":["v0.x"]},{"location":"blog/v030/","title":"v0.3.0 - 2023.02.20","text":"<p>This release was a quick fix for a wrong directory structure in <code>site-packages</code> after package installation.</p>","tags":["v0.x"]},{"location":"blog/v040/","title":"v0.4.0 - 2023-03-28","text":"<p>In this release, many things have happened, but the most important one is a project rename.</p> <p>During a development, many ideas about further development came to my mind. I have created a backlog.</p>","tags":["v0.x"]},{"location":"blog/v040/#changelog","title":"Changelog","text":"","tags":["v0.x"]},{"location":"blog/v040/#general","title":"General","text":"<ul> <li> project name</li> <li> cross configuration of blog and auto-nav plugins:<ul> <li>blog does not add auto-nav meta files</li> <li>auto-nav automatically adds blog directory to skipped directories since it will be built by blog</li> <li>if one of the plugins is not enabled, other is not using its values</li> </ul> </li> <li> documentation</li> </ul>","tags":["v0.x"]},{"location":"blog/v040/#blog","title":"Blog","text":"<ul> <li> possibility to choose a blog as a starting page with option to define manually blog in nav configuration</li> <li> <code>slug</code> config option for setting an entire blog's main directory URL</li> <li> internal file structure refactor with new global plugin config (<code>BlogConfig</code> class) that will help with further development with small fixes and improvements</li> <li> blog subdirectory navigation creation (entry path needs to be equal to subdirectory name)</li> <li> live reload infinite loop during <code>serve</code> caused by temporary files created and removed in blog directory</li> <li> navigation is no longer overridden by a blog (if there is no other nav, blog will create on with recent posts as a main page)</li> </ul>","tags":["v0.x"]},{"location":"blog/v040/#minifier-new-plugin","title":"Minifier (new plugin)","text":"<ul> <li> PNG image minifier (using: pngquant and oxipng)</li> <li> JPG image minifier (using: mozjpeg)</li> <li> SVG image minifier (using: svgo)</li> <li> HTML file minifier (using: html-minifier)</li> <li> CSS file minifier (using: postcss with plugins: cssnano, svgo)</li> <li> JS file minifier (using: uglifyjs)</li> </ul>","tags":["v0.x"]},{"location":"blog/v040/#auto-nav-new-plugin","title":"Auto-nav (new plugin)","text":"<ul> <li> build navigation based on file names</li> <li> directory metadata and additional settings can be set in a frontmatter of <code>*.md</code> file (default to <code>README.md</code>)</li> <li> configuration of sort prefix delimiter</li> <li> sort prefix removal in URL and site files</li> <li> read file title from <code>title</code> metadata key</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> <p><p>- file size optimizations, that is beneficial for site download speed and SEO (pub-minifier plugin -  v0.4.0),</p></p> v0.4.1 - 2023-03-28 <p><p>It's a quick fix for a small problem in v0.4.0.</p></p>","tags":["v0.x"]},{"location":"blog/v041/","title":"v0.4.1 - 2023-03-28","text":"<p>It's a quick fix for a small problem in v0.4.0.</p>","tags":["v0.x"]},{"location":"blog/v041/#changelog","title":"Changelog","text":"<ul> <li> links in documentation</li> <li> imports of libraries</li> <li> badges links + new added</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p>","tags":["v0.x"]},{"location":"blog/v050/","title":"v0.5.0 - 2023-04-04","text":"<p>Material for MkDocs has its own social cards plugin, but there are some limitations of it (or rather I should say, their implementation is limiting in some areas). The Material approach to social cards is to generate an image based on document information and requires changing the template manually to add those cards.</p> <p>Publisher for MkDocs uses a different approach to social cards:</p> <ul> <li>you can set an image per document, but you have to create this image by yourself - it gives you a better control over how it looks like, so it can be more create than the one generated from the template,</li> <li>you don't have to change a document template because all the data related to social cards is injected into HTML code of the document while rendering it.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p>","tags":["v0.x"]},{"location":"blog/v050/#changelog","title":"Changelog","text":"","tags":["v0.x"]},{"location":"blog/v050/#blog","title":"Blog","text":"<ul> <li> index blog post title is now a link to a post</li> </ul>","tags":["v0.x"]},{"location":"blog/v050/#social-new-plugin","title":"Social (new plugin)","text":"<ul> <li> automatic addition of Open Graph tags directly into HTML code (no template modification is needed) based on document meta</li> <li> automatic addition of Twitter tags directly into HTML code (no template modification is needed) based on document meta</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> <p><p>- social cards metadata creation based on document metadata (pub-social plugin -  v0.5.0),</p></p>","tags":["v0.x"]},{"location":"blog/v100/","title":"v1.0.0 - 2023-06-13","text":"<p>This was quite a journey to make this release and push it to v1.0.0. So far, this whole documentation was created inside the Obsidian but since all the files are just a flat text file written using Markdown syntax, you were unable to see it. The reason for that was simple: integration with Obsidian was not \"mature\" enough to be presented. You can ask: \"Why? Obsidian just uses the same Markdown syntax as MkDocs uses\". The answer to that is not so obvious. The simple answer is just \"yes\", but the real answer is \"not always\". Obsidian introduces some additional syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. If you use them \"as is\" in MkDocs, you will see a pure (not parsed) text, not the intended one since MkDocs does not understand this syntax. To make it \"understandable\" for MkDocs, it has to be \"translated\" into regular Markdown syntax.</p> <p>Translation is non-destructive</p> <p>All markdown translations (or rather I should say conversions) are non-destructive to your Obsidian vault and occurs \"on the fly\" while static files are produced. It means that you can use this plugin side-by-side with Obsidian and use, for example, git repository as your vault backup. You don't have to copy or specially prepare your files before using this tool.</p> <p>For that reason, a new plugin was created, that supports not only the mentioned Obsidian elements, but also some additional ones like:</p> <ul> <li>backlinks,</li> <li>callouts,</li> <li>wikilinks,</li> <li>vega charts (using Vega Visualization Plugin for Obsidian) - advanced solution for creating charts.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p> <p>I need to start to implement unit tests because this project becomes too big to test it manually and deliver production grade quality. Probably after introducing unit tests, I will end the beta period of this project and consider it as a production ready. It doesn't mean that the project will be complete or free from errors, but at least new releases should not break pages built with this project.</p> <p>Also from now on all new releases will be smaller. I will try to focus on smaller improvements and fixes, so you should fell like this project is more alive.</p> <p>Last thing is a new project logo:</p> <p></p> <p>Known Issues</p> <p>List of known issues:</p> <ul> <li> <p>internal links in blog teasers are not working,</p> </li> <li> <p>using icons in page title, will cause problems with title display in the browser window.</p> </li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#changelog","title":"Changelog","text":"","tags":["v1.x"]},{"location":"blog/v100/#general","title":"General","text":"<ul> <li> internal class for HTML modifications</li> <li> project license to MIT</li> <li> project <code>README.md</code> cleanup</li> <li> internal method for importing other plugin config (needed for cross functionalities)</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#auto-nav-plugin-removed","title":"Auto-nav (plugin removed)","text":"<p>The whole functionality of this plugin has been moved to a new Meta plugin.</p>","tags":["v1.x"]},{"location":"blog/v100/#blog","title":"Blog","text":"<ul> <li> exclude from search blog posts teaser/index, category, tag or archive pages</li> <li> exclude comments in blog posts teaser/index, category, tag or archive pages</li> <li> internal links for blog posts teaser/index, category, tag or archive pages</li> <li> removed <code>edit_url</code> for blog teaser/index, category, tag or archive pages</li> <li> automatic detection of the blog as starting page (config value for this setting was removed)</li> <li> post publication state (provided by Meta plugin</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#social","title":"Social","text":"<ul> <li> code refactor of HTML modification elements and logging added</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#meta-new-plugin","title":"Meta (new plugin)","text":"<p>This plugin is a Swiss army knife that helps a lot with various tasks related to publication, SEO, etc. Take a look at the below changelog to see what is offered by this plugin.</p> <ul> <li> build navigation based on file names order</li> <li> set multiple document parameters by using its metadata:<ul> <li><code>title</code> - document title</li> <li><code>slug</code>- URL of the document</li> <li><code>status</code> - document publication status (published, hidden, draft)</li> <li><code>date</code> - document creation date</li> <li><code>update</code> - document last update date (used for sitemap and SEO optimizations)</li> </ul> </li> <li> directory metadata and additional settings can be set in a frontmatter of <code>*.md</code> file (default to <code>README.md</code>):         - possibility to define <code>slug</code>(this affects only the directory where <code>README.md</code> is placed)<ul> <li>possibility to define <code>skip_dir</code>(this affects only the directory and all subdirectories where the file is located)</li> <li>possibility to define <code>hidden_dir</code>(this affects only the directory and all subdirectories where the file is located)</li> </ul> </li> <li> while serve page locally, all hidden and draft pages becomes published (this setting, helps with document preview while writing)</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#obsidian-new-plugin","title":"Obsidian (new plugin)","text":"<p>This plugin is a set of functionalities and should be split into various smaller plugins, but due to some cross functionalities, it has been integrated into the bigger one. Each sub plugin can be controlled separately, so if you don't need all the functionalities, you can just disable them or simply do not enable one that are disabled by default.</p>","tags":["v1.x"]},{"location":"blog/v100/#general_1","title":"General","text":"<ul> <li> server watch can omit <code>.obsidian</code> directory that needs to be a part of the documentation directory that is automatically added into watch and causes server reload on (almost) any interaction with obsidian (changing settings etc.)</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#links","title":"Links","text":"<ul> <li> support for wiki links format for images and internal links</li> <li> configurable image lazy loading option (SEO optimization)</li> <li> documents and images file path solver (it doesn't affect documentation, but it's required by MkDocs for proper links generation)</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#callouts","title":"Callouts","text":"<ul> <li> mapping of all Obsidian callouts into Markdown admonitions</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#backlinks","title":"Backlinks","text":"<ul> <li> auto-generation of backlinks for all internal documents (visible as an custom admonition at the bottom of the page)</li> <li> backlinks are not generated for blog temporary files like post indexes, archive, tags and categories</li> <li> backlinks are grouped per page like in Obsidian (if more than one link is pointing from one page to another, all context links will be visible)</li> </ul>","tags":["v1.x"]},{"location":"blog/v100/#charts","title":"Charts","text":"<ul> <li> support for vega and vega-lite charts when added by Vega Visualization Plugin for Obsidian</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> <p><p>- automatic documents navigation creation (pub-meta plugin -  v1.0.0),</p><p>- documents publication status with additional meta-data like URL names, etc. beneficial for SEO (pub-meta plugin -  v1.0.0),</p><p>- integration with Obsidian.md as documentation editor with support for some Markdown syntax specific to it and some plugins (pub-obsidian plugin  v1.0.0):</p></p> Setting up a blog <p><p>&gt; Standalone mode (blog as a starting page) was removed in version v0.6.0 and now this is automatically detected, based on site navigation structure.</p></p>","tags":["v1.x"]},{"location":"blog/v110/","title":"v1.1.0 - 2023-09-01","text":"<p>Here I am with a new version of Publisher for MkDocs plugins. I have promised to make smaller releases, but my brain is refusing me to work on a small scale. It's really hard to achieve that, especially when I started to have some feedback from you, users of this tool. Because of that feedback and some problems you encountered, I decided to focus in this release on 2 main topics: some bug fixing and introducing a new plugin called pub-debugger. This plugin allows for an insight into all messages produced by plugins while building (or serving) a web page. Also, it's able to produce a ZIP file, with some basic information that could help me, whenever you will need to report an issue.</p> <p>Privacy disclaimer</p> <p><code>pub-debugger</code> plugin do not send any files over the internet, but if you want to use a Zip file as an attachment for an issue submission or share it with anybody, please make a review of the content of this archive file.</p> <p>Please remember</p> <p>It's your data and your responsibility what you are publishing over the internet. This plugin is only giving you the tool that should help, and you cannot blame me (the author of this plugin) for any potential data leaks.</p> <p>There is also one very crucial topic related to this project name. When I shared information about Publisher for MkDocs over an official Obsidian.md community forum the developer of an Obsidian GitHub Publisher plugin provided me information that we have some conflict related to our plugins name. We were also spoken privately over Discord and came to some agreement related to our work. More information can be found in this thread, but in short:</p> <ul> <li>My set of MkDocs plugins will be called Publisher for MkDocs since my work is related to MkDocs with additional support for Obsidian as an IDE/text editor,</li> <li>Mara-Li Obsidian plugin will be called GitHub Publisher since her work is related to Obsidian with the possibility to use MkDocs as a beck-end for publication.</li> </ul> <p>In the feature, some elements of this project could be part of Mara-Li work, but it's her decision. I will continue working on this project and help her with some potential issues solving.</p> <p>I have also spent some time on unification of look the setup documentation. Previously, documentation was created a similar way as Material for MkDocs is doing it, but I decided to drop this approach and simplify it a little bit. Most of the work was around configuration options, that was too verbose. Currently, all configuration options related to given functionality are gathered in a single code block with their default values, so it's easier to copy it to yours <code>mkdocs.yaml</code> file. As a result, all descriptions related to those options are placed below this code block, so it's easy to find the information about it. I hope it's now easier to navigate and understand all the configuration options.</p> <p>A lot of you have been asking me about comparison to other tools and I have answered to them in this Reddit thread. I have a plan to gather all this information and create a separate document about this (and also to some credits to projects I get inspiration from), but simply didn't have time for that so far.</p> <p>There were also some requests related to the publication process. I'm aware that this is the biggest lacking right now of this project that is supposed to be related to publishing, and I will definitely solve this soon. There is an upcoming update related to that as:</p> <ul> <li>GitHub template repository,</li> <li>Docker image,</li> <li>GitHub Action,</li> <li>documentation.</li> </ul> <p>I don't promise that all of the above will be ready in the next release, but some of them will be for sure.</p>","tags":["v1.x"]},{"location":"blog/v110/#changelog","title":"Changelog","text":"","tags":["v1.x"]},{"location":"blog/v110/#general","title":"General","text":"<ul> <li> rename of directory with documentation files</li> <li> Python libraries update</li> <li> project naming unification</li> <li> pre-commit JSON check and obsidian file exclusion</li> <li> some links updates in documentation</li> <li> code type hinting updates</li> <li> logger names unification - it's related to pub-debugger plugin</li> <li> code refactor and cleanup</li> <li> drop <code>python-frontmatter</code> from Python libraries</li> </ul>","tags":["v1.x"]},{"location":"blog/v110/#blog","title":"Blog","text":"<ul> <li> minor fix for internal linking (still not full solution)</li> <li> fix for deprecated warning regarding <code>importlib.resources</code></li> </ul>","tags":["v1.x"]},{"location":"blog/v110/#minifier","title":"Minifier","text":"<ul> <li> small code reformat related to shared library changes</li> <li> files are not minified when using <code>mkdocs serve</code> (this is default behavior, but it can be changed)</li> </ul>","tags":["v1.x"]},{"location":"blog/v110/#meta","title":"Meta","text":"<ul> <li> possibility to declare whole directory as hidden</li> <li> more logging messages</li> <li> better support for <code>pub-obsidian</code> plugin (template and obsidian directory are now always drafts)</li> <li> fix for error with reading <code>README.md</code> when no empty line at the end of file</li> <li> fix for adding again the same directory to draft directories when using <code>mkdocs serve</code></li> </ul>","tags":["v1.x"]},{"location":"blog/v110/#obsidian","title":"Obsidian","text":"<ul> <li> minor fix for internal linking (still not full fix)</li> <li> fix for preserving new line in callouts</li> </ul>","tags":["v1.x"]},{"location":"blog/v110/#debugger-new-plugin","title":"Debugger (new plugin)","text":"<ul> <li> console log reformatting with configuration</li> <li> added logging into <code>*.log</code> file with configuration</li> <li> added old log file replacement</li> <li> ZIP file creation with log output and some additional files</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> <p><p>- debugger and logging on steroids - useful for issue reporting and for MkDocs plugin development (pub-debugger plugin  v1.1.0).</p></p>","tags":["v1.x"]},{"location":"development/changelog/","title":"Version history","text":""},{"location":"development/changelog/#110-20230901","title":"1.1.0 - 2023.09.01","text":""},{"location":"development/changelog/#general","title":"General","text":"<ul> <li> rename of directory with documentation files</li> <li> Python libraries update</li> <li> project naming unification</li> <li> pre-commit JSON check and obsidian file exclusion</li> <li> some links updates in documentation</li> <li> code type hinting updates</li> <li> logger names unification - it's related to pub-debugger plugin</li> <li> code refactor and cleanup</li> <li> drop <code>python-frontmatter</code> from Python libraries</li> </ul>"},{"location":"development/changelog/#blog","title":"Blog","text":"<ul> <li> minor fix for internal linking (still not full solution)</li> <li> fix for deprecated warning regarding <code>importlib.resources</code></li> </ul>"},{"location":"development/changelog/#minifier","title":"Minifier","text":"<ul> <li> small code reformat related to shared library changes</li> <li> files are not minified when using <code>mkdocs serve</code> (this is default behavior, but it can be changed)</li> </ul>"},{"location":"development/changelog/#meta","title":"Meta","text":"<ul> <li> possibility to declare whole directory as hidden</li> <li> more logging messages</li> <li> better support for <code>pub-obsidian</code> plugin (template and obsidian directory are now always drafts)</li> <li> fix for error with reading <code>README.md</code> when no empty line at the end of file</li> <li> fix for adding again the same directory to draft directories when using <code>mkdocs serve</code></li> </ul>"},{"location":"development/changelog/#obsidian","title":"Obsidian","text":"<ul> <li> minor fix for internal linking (still not full fix)</li> <li> fix for preserving new line in callouts</li> </ul>"},{"location":"development/changelog/#debugger-new-plugin","title":"Debugger (new plugin)","text":"<ul> <li> console log reformatting with configuration</li> <li> added logging into <code>*.log</code> file with configuration</li> <li> added old log file replacement</li> <li> ZIP file creation with log output and some additional files</li> </ul>"},{"location":"development/changelog/#100-20230613","title":"1.0.0 \u2013 2023.06.13","text":""},{"location":"development/changelog/#general_1","title":"General","text":"<ul> <li> internal class for HTML modifications</li> <li> project logo</li> <li> project license to MIT</li> <li> project <code>README.md</code> cleanup</li> <li> internal method for importing other plugin config (needed for cross functionalities)</li> </ul>"},{"location":"development/changelog/#auto-nav-plugin-removed","title":"Auto-nav (plugin removed)","text":"<p>The whole functionality of this plugin has been moved to a new Meta plugin.</p>"},{"location":"development/changelog/#blog_1","title":"Blog","text":"<ul> <li> exclude from search blog posts teaser/index, category, tag or archive pages</li> <li> internal links for blog posts teaser/index, category, tag or archive pages</li> <li> removed <code>edit_url</code> for blog teaser/index, category, tag or archive pages</li> <li> automatic detection of the blog as starting page (config value for this setting was removed)</li> <li> post publication state (provided by Meta plugin )</li> </ul>"},{"location":"development/changelog/#social","title":"Social","text":"<ul> <li> code refactor of HTML modification elements and logging added</li> </ul>"},{"location":"development/changelog/#meta-new-plugin","title":"Meta (new plugin)","text":"<p>This plugin is a Swiss army knife that helps a lot with various tasks related to publication, SEO, etc. Take a look at the below changelog to see what is offered by this plugin.</p> <ul> <li> build navigation based on file names order</li> <li> set multiple document parameters by using its metadata:<ul> <li><code>title</code> - document title</li> <li><code>slug</code>- URL of the document</li> <li><code>status</code> - document publication status (published, hidden, draft)</li> <li><code>date</code> - document creation date</li> <li><code>update</code> - document last update date (used for sitemap and SEO optimizations)</li> </ul> </li> <li> directory metadata and additional settings can be set in a frontmatter of <code>*.md</code> file (default to <code>README.md</code>):         - possibility to define <code>slug</code>(this affects only the directory where <code>README.md</code> is placed)<ul> <li>possibility to define <code>skip_dir</code>(this affects only the directory and all subdirectories where the file is located)</li> <li>possibility to define <code>hidden_dir</code>(this affects only the directory and all subdirectories where the file is located)</li> </ul> </li> </ul>"},{"location":"development/changelog/#obsidian-new-plugin","title":"Obsidian (new plugin)","text":"<p>This plugin is a set of functionalities and should be split into various smaller plugins, but due to some cross functionalities, it has been integrated into the bigger one. Each sub plugin can be controlled separately, so if you don't need all the functionalities, you can just disable them or simply do not enable one that are disabled by default.</p>"},{"location":"development/changelog/#general_2","title":"General","text":"<ul> <li> server watch can omit <code>.obsidian</code> directory that needs to be a part of the documentation directory that is automatically added into watch and causes server reload on (almost) any interaction with obsidian (changing settings etc.)</li> </ul>"},{"location":"development/changelog/#links","title":"Links","text":"<ul> <li> support for wiki links format for images and internal links</li> <li> configurable image lazy loading option (SEO optimization)</li> <li> documents and images file path solver (it doesn't affect documentation, but it's required by MkDocs for proper links generation)</li> </ul>"},{"location":"development/changelog/#callouts","title":"Callouts","text":"<ul> <li> mapping of all Obsidian callouts into Markdown admonitions</li> </ul>"},{"location":"development/changelog/#backlinks","title":"Backlinks","text":"<ul> <li> auto-generation of backlinks for all internal documents (visible as an custom admonition at the bottom of the page)</li> <li> backlinks are not generated for blog temporary files like post indexes, archive, tags and categories</li> <li> backlinks are grouped per page like in Obsidian (if more than one link is pointing from one page to another, all context links will be visible)</li> </ul>"},{"location":"development/changelog/#charts","title":"Charts","text":"<ul> <li> support for vega and vega-lite charts when added by Vega Visualization Plugin for Obsidian</li> </ul>"},{"location":"development/changelog/#050-20230404","title":"0.5.0 \u2013 2023.04.04","text":""},{"location":"development/changelog/#blog_2","title":"Blog","text":"<ul> <li>add: index blog post title is now a link to a post</li> </ul>"},{"location":"development/changelog/#social-new-plugin","title":"Social (new plugin)","text":"<ul> <li>add: automatic addition of open graph tags directly into HTML code (no template modification is needed) based on document meta</li> <li>add: automatic addition of twitter tags directly into HTML code (no template modification is needed) based on document meta</li> </ul>"},{"location":"development/changelog/#041-2023-03-28","title":"0.4.1 - 2023-03-28","text":""},{"location":"development/changelog/#general_3","title":"General","text":"<ul> <li>fix: links in documentation</li> <li>fix: imports of libraries</li> <li>fix: badges links + new added</li> </ul>"},{"location":"development/changelog/#040-2023-03-28","title":"0.4.0 - 2023-03-28","text":""},{"location":"development/changelog/#general_4","title":"General","text":"<ul> <li>changed: project rename</li> <li>added: cross configuration of blog and auto-nav plugins:</li> <li>blog does not add auto-nav meta files</li> <li>auto-nav automatically adds blog directory to skipped directories since it will be built by blog</li> <li>if one of the plugins is not enabled, other is not using its values</li> </ul>"},{"location":"development/changelog/#blog_3","title":"Blog","text":"<ul> <li>added: possibility to choose a blog as a starting page with option to define manually blog in nav configuration</li> <li>added: <code>slug</code> config option for setting an entire blog's main directory URL</li> <li>changed: internal file structure refactor with new global plugin config (BlogConfig class) that will help with further development with small fixes and improvements</li> <li>changed: blog subdirectory navigation creation (entry path needs to be equal to subdirectory name)</li> <li>fixed: live reload infinite loop during <code>serve</code> caused by temporary files created and removed in blog directory</li> <li>fixed: navigation is no longer overridden by a blog (if there is no other nav, blog will create on with recent posts as a main page)</li> </ul>"},{"location":"development/changelog/#minifier-new-plugin","title":"Minifier (new plugin)","text":"<ul> <li>added: PNG image minifier (using: pngquant and oxipng)</li> <li>added: JPG image minifier (using: mozjpeg)</li> <li>added: SVG image minifier (using: svgo)</li> <li>added: HTML file minifier (using: html-minifier)</li> <li>added: CSS file minifier (using: postcss with plugins: cssnano, svgo)</li> <li>added: JS file minifier (using: uglifyjs)</li> <li>added: read number of threads from system</li> </ul>"},{"location":"development/changelog/#auto-nav-new-plugin","title":"Auto-nav (new plugin)","text":"<ul> <li>added: build navigation based on file names</li> <li>added: directory metadata and additional settings can be set in a frontmatter of <code>*.md</code> file (default to <code>README.md</code>)</li> <li>added: configuration of sort prefix delimiter</li> <li>added: sort prefix removal in URL and site files</li> </ul>"},{"location":"development/changelog/#030-20230220","title":"0.3.0 - 2023.02.20","text":"<ul> <li>fixed: for wrong directory structure in site-packages after install</li> </ul>"},{"location":"development/changelog/#020-20230220","title":"0.2.0 - 2023.02.20","text":"<ul> <li>added: sub-pages for archive, categories, blog</li> <li>added: configurable blog posts pagination with page navigation</li> <li>added: interface language change: EN and PL (help wanted with more languages)</li> <li>added: possibility to override for all interface text elements</li> </ul>"},{"location":"development/changelog/#010-initial-release","title":"0.1.0 - initial release","text":"<ul> <li>added: blog post update date based on metadata</li> <li>added: blog post URL link based on metadata</li> <li>added: blog post tags and categories based on metadata</li> <li>added: support for blog post teaser</li> <li>added: auto generation of blog posts navigation</li> </ul> <p>Legend</p> <p> - added</p> <p> - removed</p> <p> - fixed</p> <p> - changed</p>"},{"location":"development/development/","title":"Development","text":""},{"location":"development/development/#install-as-editable-library","title":"Install as editable library","text":"pippoetry <pre><code>pip install --editable ../mkdocs-publisher/\n</code></pre> <pre><code>poetry add --editable ../mkdocs-publisher/\n</code></pre>"},{"location":"development/development/#install-from-build-package","title":"Install from build package","text":"pippoetry <pre><code>pip install ../mkdocs-publisher/dist/mkdocs-publisher-0.4.1.tar.gz\n</code></pre> <pre><code>poetry add ../mkdocs-publisher/dist/mkdocs-publisher-0.4.1.tar.gz\n</code></pre>"},{"location":"development/development/#remove-from-dependencies","title":"Remove from dependencies","text":"pippoetry <pre><code>pip uninstall mkdocs-publisher\n</code></pre> <pre><code>poetry remove mkdocs-publisher\n</code></pre>"},{"location":"development/versioning/","title":"Approach to versioning","text":"<p>The current approach to versioning of \u201cPublisher for MkDocs\u201d is based on semantic versioning and looks like this <code>v1.2.3</code>, or in general, it's: <code>vMAJOR,MINOR,PATCH</code> where:</p> <ul> <li><code>MAJOR</code> number is increased when a new braking API change is introduced,</li> <li><code>MINOR</code> number is increased when new functionality is introduced without API changes,</li> <li><code>PATCH</code> number is increased when there is no new functionality and usually is used for bug fixes.</li> </ul> <p>Because this package is based on MkDocs API, the only reason to change <code>MAJOR</code> number would be to break compatibility with an older version of MkDocs or when this package will go out of beta stage.</p> <p>Since this package contains various sets of plugins, <code>MINOR</code> number will be changed when a new plugin is introduced or an existing one changes significantly (new config options, new functionality added, etc.).</p> <p><code>PATCH</code> number will be used mostly for bug fixes and smaller internal changes like documentation modifications, code refactor or unit testing changes.</p>"},{"location":"development/other/backlog/","title":"Plans for future development","text":"<p>Below lists is a list of tasks that are planned to be done (a backlog) and there is no particular order when they will be implemented. If you are interested in any of the below points being implemented in a first place or there is something missing here, please report and issue.</p>"},{"location":"development/other/backlog/#plugins","title":"Plugins","text":""},{"location":"development/other/backlog/#blog","title":"Blog","text":"<ul> <li> Add: blog post reading time + watch time (defined in post meta)</li> <li> Add: possibility to disable categories and/or tags pages</li> <li> Add: authors and update date in the template</li> <li> Add: blog posts index template override</li> <li> Add: language override in YAML file</li> <li> Add: configurable date format</li> <li> Add: auto-generate slug based on slugify (+ inject into document metadata)</li> <li> Change: detect if meta plugin is enabled and based on its configuration use key names</li> <li> Add: possibility to define blog directory in <code>README.md</code> file when meta plugin is enabled</li> <li> Fix: links when using meta plugin and slugs on post teasers</li> <li> Fix: internal links in teasers</li> <li> Fix: date format and solve the problem, when multiple posts have the same date</li> <li> Change: temporary file location</li> </ul>"},{"location":"development/other/backlog/#minifier","title":"Minifier","text":"<ul> <li> Add: ignored files list/pattern (globally and per file type)</li> <li> Add: stats for number of minified/taken from cache files</li> <li> Add: cache disable (globally and per file type)</li> <li> Add: configurable file extensions per minifier</li> <li> Add: documentation for specific settings per file type</li> <li> Add: support for WebP files</li> </ul>"},{"location":"development/other/backlog/#meta","title":"Meta","text":"<ul> <li> Add: sitemap optimizations and creation of <code>robots.txt</code> file based on document status</li> <li> Add: multiple HTML <code>&lt;meta name=\"author\"&gt;</code> based on frontmatter authors</li> <li> Add: multiple HTML <code>&lt;meta name=\"keywords\"&gt;</code> based on frontmatter categories and tags</li> <li> Add: publisher HTML value<code>&lt;link href=\"{site_url}\" rel=\"publisher\" /&gt;</code> that points to the main page URL</li> <li> Add: robots HTML settings <code>&lt;meta name=\"robots\" content=\"noindex, nofollow\" /&gt;</code></li> <li> Add: check for description and title length (SEO)</li> <li> Add: turn off auto nav creation setting</li> <li> Add: navigation links using <code>README.md</code> in fake directory (directory is needed to preserve order of an auto navigation builder)</li> <li> Add: dynamically generate pages for tags and categories for all documents (just like in blog)</li> <li> Add: nav name metadata (just like in blog)</li> <li> Add: configurable key and format for creation and update date of the document</li> <li> Add: file/directory redirections</li> <li> Add: publication date in the future</li> <li> Add: creating subpages for tags and categories (need to be separated from the blog posts)</li> </ul>"},{"location":"development/other/backlog/#social","title":"Social","text":"<ul> <li> Add: image generator if one is not provided</li> <li> Add: ignored file list/pattern</li> <li> Add: warning on missing meta key</li> <li> Add: ignore single file based on metadata</li> <li> Add: check for description and title length (SEO)</li> <li> Add: set up a default image used for a social card</li> <li> Add: metadata key names from meta plugin</li> <li> Change: detect if meta plugin is enabled and based on its configuration use key names</li> </ul>"},{"location":"development/other/backlog/#obsidian","title":"Obsidian","text":"<ul> <li> Add: mind maps (using markmap)</li> <li> Add: simpler charts (using chart.js)</li> <li> Add: templates (blog post, page, etc.)</li> <li> Add: graph view (long-term goal)</li> <li> Add: backlinks with unlinked mentions based on page title and aliases (maybe some headings titles?)</li> <li> Add: disable backlinks on given page (meta-data: <code>backlinks: false</code>)</li> <li> Add: configurable aliases in callouts with auto-add to Obsidian CSS files</li> <li> Add: internal link's tooltip preview (use tippy.js)</li> <li> Fix: not needed new/blank lines inside code blocks</li> <li> Change: backlink anchor link creation using slug information</li> </ul>"},{"location":"development/other/backlog/#debugger","title":"Debugger","text":"<ul> <li> Add: option to add markdown files to ZIP archive</li> <li> Add: option to add graphic files and replace them with 1x1 pixel files (size reduction and anonymization)</li> <li> Add: minifier tools version output or missing</li> </ul>"},{"location":"development/other/backlog/#offline-plugin-idea","title":"Offline (plugin idea)","text":"<ul> <li> Add: download JS files from the internet to local directory and replace links in HTML output files</li> <li> Add: detect, download and replace other types of files</li> </ul>"},{"location":"development/other/backlog/#rss-plugin-idea","title":"RSS (plugin idea)","text":"<ul> <li> Add: possibility to create multiple rss feeds (blog, other pages/directories, etc.)</li> </ul>"},{"location":"development/other/backlog/#common-plugin-idea","title":"Common (plugin idea)","text":"<ul> <li> Add: date format</li> <li> Add: auto-add this plugin into <code>mkdocs.yml</code> by other plugins</li> </ul>"},{"location":"development/other/backlog/#general","title":"General","text":""},{"location":"development/other/backlog/#cli-tool","title":"CLI tool","text":"<ul> <li> Add: project initialization that preconfigure <code>mkdocs.yml</code></li> <li> Add: create a new blog post</li> <li> Add: document/blog post slug update</li> <li> Add: check for minifier tools</li> <li> Add: clean minifier cache</li> <li> Add: minify single file using minifier</li> <li> Add: minifier tools installation</li> <li> Add: document/blog post publication state change</li> <li> Add: CONTRIBUTING.md file to the repo</li> <li> Add: issues templates in the project repository issues</li> </ul>"},{"location":"development/other/backlog/#documentation","title":"Documentation","text":"<ul> <li> Integration with RSS plugin</li> <li> How to set up and use docker image</li> <li> Setting up CI/CD in GitHub Actions</li> <li> This plugin development how to</li> <li> Credits for used libraries with description (like in MkDocs Coverage Plugin)</li> </ul>"},{"location":"development/other/backlog/#other","title":"Other","text":"<ul> <li> Create a Docker image with everything preinstalled and preconfigured</li> <li> Add to docker image online Vega charts editor</li> <li> GitHub repo with preconfigured pages, etc. (can be integrated with Docker Image creation)</li> <li> Unit tests and code coverage with pre-commit</li> <li> Cleanup list of code TODO's</li> <li> Move translations to jinja templates like Material for MkDocs is doing it</li> </ul> <p>Backlinks:</p> Setting up Obsidian <p><p>Support for more plugins is coming soon.</p></p> Setting up social cards <p><p>When you are a blogger or a person who wants to publish some documentation, book or any other piece of written text, you probably also want to share it over social media. Most platforms (like Facebook, LinkedIn, etc.) uses some web page metadata called Open Graph. Twitter is using part of this data and some additional metadata called Twitter Cards. No matter if you want to share your text with Facebook or Twitter, MkDocs Publisher is here to help you with this task and is doing it (almost) fully automatically. You don't have to edit any template like it's needed when you would like to use similar functionality from Material for MkDosc theme (at least it's true for <code>v9.1.5</code>). At this time (MkDocs Publisher <code>v0.5.0</code>) it's not possible to auto-generate a whole social card (this task is added to the backlog). However, it's possible to add your image as a preview with additional description, etc.</p></p> First steps <p><p>This section is in backlog.</p></p> v0.4.0 - 2023-03-28 <p><p>During a development, many ideas about further development came to my mind. I have created a backlog.</p></p>"}]}