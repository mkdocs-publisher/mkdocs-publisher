{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Publisher plugin for MkDocs","text":"<p>Publisher for MkDocs is a set of plugins for MkDocs that was created originally as \u201cyet another blogging plugin for MkDocs\u201d (you can read more about this in this blog post). During a process of development, I realized that it can become something more that will help not only me with blog creation, but also as a part of a wider publishing tool. Documents creation can be used with cooperation with an Obsidian.md that is a tool for creating a second brain and also an excellent Markdown files editor.</p> <p>Currently, this plugin is also written with strict cooperation with Material for MkDocs theme. It was not tested on any, and probably some functionalities may not work as intended (for example, formatting of blog posts). However, all the plugins that are included in this package should work separately and not all of them have to be enabled (for example, pub-minifier will work with any other set of plugins).</p>"},{"location":"#included-features","title":"Included features","text":"<p>The list of most important features built into MkDocs Publisher:</p> <ul> <li>automatic navigation builds (pub-auto-nav plugin -  v0.4.0),</li> <li>creating a blog posts with automatic build of archive, categories, tags, and index pages (pub-blog plugin),</li> <li>social cards metadata creation based on document metadata (pub-social plugin -  v0.5.0),</li> <li>file size optimizations, that is beneficial for site download speed and SEO (pub-minifier plugin -  v0.4.0),</li> <li>integration with Obsidian.md as documentation editor with support for some Markdown syntax specific to it and some plugins (pub-obsidian plugin  v0.6.0):<ul> <li>backlinks,</li> <li>callouts ,</li> <li>charts (using Vega Visualization Plugin for Obsidian),</li> <li>mind maps (using Mindmap NextGen plugin for Obsidian).</li> </ul> </li> </ul>"},{"location":"setup/installation","title":"Installation","text":"<p>All plugins are part of this package and cannot be installed separately, but not all of them have to be enabled.</p> <p>Publisher for MkDocs is a Python package that can be installed using <code>pip</code> (ideally inside a virtual environment) or any other package manager like <code>poetry</code> that handles virtual management out of the box.</p> pippoetry <pre><code>pip install mkdocs-publisher\n</code></pre> <pre><code>poetry add mkdocs-publisher\n</code></pre> <p>This package depends on some other Python packages and MkDocs plugins, so during installation they will also be installed. List of them:</p> <ul> <li>MkDocs,</li> <li>Material for MkDocs - probably the best theme for MkDocs,</li> <li>PyMdown Extensions - extensions for Markdown language.</li> </ul> <p>There are also some external tools used, mostly by <code>pub-minifier</code> plugin. Since this plugin is part of this package, but it's optional to use (not enabled by default), the process of installation of those tools is described in this plugin installation.</p> <p>Backlinks:</p> First steps <p><p>Currently, please take a look at installation and each plugin configuration section of this documentation.</p></p>"},{"location":"setup/setting-up-auto-nav","title":"Setting up an auto-nav plugin","text":"<p>Backlinks:</p> Home <p><p>- automatic navigation builds (pub-auto-nav plugin -  v0.4.0),</p></p> Setting up a blog <p><p>    When pub-auto-nav plugin is configured and directory for blog posts is set up, there is nothing more left to be configured. All the things related to creating navigation section will be handled automatically by the pub-auto-nav plugin.</p></p>"},{"location":"setup/setting-up-a-blog","title":"Setting up a blog plugin","text":"<p>Publisher for MkDocs allows you to create a blog. A blog can be a sidecar for your current documentation, or it can be configured as a standalone. The entire blogging engine is created and preconfigured, so you can focus on content creation. It will handle creation of:</p> <ul> <li>indexes,</li> <li>archive,</li> <li>categories,</li> <li>tags,</li> <li>pagination.</li> </ul> <p>All the above documents are created outside <code>docs</code> directory, so they are not visible and do not interfere with your content.</p> <p>This documentation contains a blog that is created using this plugin, so you can take a look at a living example.</p>"},{"location":"setup/setting-up-a-blog#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-a-blog#enable-blog","title":"Enable blog","text":"<p>To enable the built-in blog plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog\n</code></pre> <p>By default, the blogging plugin assumes that blog posts are located inside <code>blog</code> subdirectory. You have to create this directory manually, so the directory structure will look like this:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>The last thing is to add a blog to a site navigation. There are 3 ways to do it:</p> Using pub-auto-nav pluginAdd to existing site layoutStandalone mode <p>When pub-auto-nav plugin is configured and directory for blog posts is set up, there is nothing more left to be configured. All the things related to creating navigation section will be handled automatically by the pub-auto-nav plugin.</p> <p>If an existing pages are created in MkDocs, it's simple to just add a blog functionality. To achieve it, Any name with path to a blog subdirectory name (by default it's a <code>blog</code>) has to be added to the <code>mkdocs.yml</code> file and blogging engine will handle everything else.</p>  mkdocs.yml <pre><code>nav:\n- ... # Previous navigation elements\n- Any name: blog\n- ... # Next navigation elements\n</code></pre> <p>A standalone mode gives a posibility to setup a MkDocs for just a pure blogging experience. Blog will become a main page. To make it happen, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\npub-blog:\nstart_page: true\n</code></pre> <p>Documents created outisde directory where blog posts are stored, will be considered as out of navigation configuration but still rendred. To use them, you have to put links to them inside blog posts or by editing thame template files.</p>"},{"location":"setup/setting-up-a-blog#settings","title":"Settings","text":"slug <p> Default: <code>blog</code> - this option gives you an ability to go to specify your blog direct URL, like <code>https://yourblog.com/blog/</code>. The <code>blog</code> part of the URL can be configured to a non-standard value:</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\nslug: blog\n</code></pre> teaser_marker <p> Default: <code>&lt;!-- more --&gt;</code> - this option gives you an ability to split a blog posts that are a massive chunk of text into two parts: blog post teaser visible on blog posts index page and the full article. To split the blog post, you have to put a <code>&lt;!-- more --&gt;</code> in some line inside a content of your blog post. This value is a valid HTML comment, so it will not be rendered. If, for any reason, you need to change it, you can do it by adding the following configuration key:</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\nteaser_marker: `&lt;!-- more --&gt;`\n</code></pre> pagination <p> Default: <code>5</code> - this option setup number of When you gather over time some amount of blog posts, their index even with short teasers, they can take quite much space over a single page and scrolling down is not a convenient solution. To avoid this, blogging engine allows splitting index pages when they contain a certain amount of blog posts.  By default, it's set to 5, but you can change it by adding a following configuration key:</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\nposts_per_page: 5\n</code></pre>"},{"location":"setup/setting-up-a-blog#directories","title":"Directories","text":"<p>This plugin to work correctly, needs to create and/or use some directories. Those settings should be considered as advanced and for day to day use, you should not change them.</p> temp_dir <p> Default: <code>.temp</code> - temporary directory is used by a blog engine to create an index files with a blog post teasers and other files like a list of archive, categories, and tags pages.</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\ntemp_dir: .temp\n</code></pre> <p>Temporary directory is created at the same level as main <code>docs</code> directory and <code>mkdocs.yml</code> configuration file.</p> <pre><code>.\n\u251c\u2500 .temp/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> archive_subdir <p> Default: <code>archive</code> - archive subdirectory is used to store dynamically generated documents that contain archive indexes.</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\narchive_subdir: archive\n</code></pre> <p>Archive directory is a subdirectory to a temporary directory.</p> <pre><code>.\n\u251c\u2500 .temp/\n\u2502  \u2514\u2500 archive/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> categories_subdir <p> Default: <code>categories</code> - categories subdirectory is used to store dynamically generated documents that contain categories indexes.</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\ncategories_subdir: categories\n</code></pre> <p>Categories subdirectory is a subdirectory to a temporary directory.</p> <pre><code>.\n\u251c\u2500 .temp/\n\u2502  \u2514\u2500 categories/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> tags <p> Default: <code>tags</code> - tags subdirectory is used to store dynamically generated documents that contain tags indexes.</p>  mkdocs.yml <pre><code>plugins:\n- pub-blog:\ntags_subdir: tags\n</code></pre> <p>Tags directory is a subdirectory to a temporary directory.</p> <pre><code>```commandline hl_lines=\"2 3\"\n.\n\u251c\u2500 .temp/\n\u2502  \u2514\u2500 tags/\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n```\n</code></pre>"},{"location":"setup/setting-up-a-blog#language","title":"Language","text":"<p>By default, the blogging plugin is set to use English (<code>en</code>) translation. Currently, available languages:</p> <ul> <li><code>en</code> - English,</li> <li><code>pl</code> - Polish.</li> </ul> <p>To set up one of the above languages, the following line has to be added to the <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugin:\n- pub-blog:\nlang: 'pl'\n</code></pre>"},{"location":"setup/setting-up-a-blog#translation","title":"Translation","text":"<p>If there is no language that suits you best, you can translate part of the interface by providing values for the below keys inside the configuration <code>mkdocs.yml</code> files. Providing those values overrides values for setup of a given language, and this way it's possible to change only some of them.</p> <p>Below, you can find a list of settings keys with English values that allow to translate some parts of the interface:</p>  mkdocs.yml <pre><code>plugins:\npub-blog:\ntranslation:\nteaser_link_text: Read more\nblog_page_title: Blog\nblog_navigation_name: Blog\nrecent_blog_posts_navigation_name: Recent posts\narchive_page_title: Archive\narchive_navigation_name: Archive\ncategories_page_title: Category\ncategories_navigation_name: Categories\ntags_page_title: Tag\ntags_navigation_name: Tags\nnewer_posts: Newer posts\nolder_posts: Older posts\n</code></pre>"},{"location":"setup/setting-up-a-blog#usage","title":"Usage","text":"<p>More detailed usage is described in how to publish.</p>"},{"location":"setup/setting-up-a-blog#customization","title":"Customization","text":"<p>It's not yet implemented.</p> <p>Backlinks:</p> Home <p><p>- creating a blog posts with automatic build of archive, categories, tags, and index pages (pub-blog plugin),</p></p>"},{"location":"setup/setting-up-a-social-cards","title":"Setting up social cards plugin","text":"<p>When you are a blogger or a person who wants to publish some documentation, book or any other piece of written text, you probably also want to share it over social media. Most platforms (like Facebook, LinkedIn, etc.) uses some web page metadata called Open Graph. Twitter is using part of this data and some additional metadata called Twitter Cards. No matter if you want to share your text with Facebook or Twitter, MkDocs Publisher is here to help you with this task and is doing it (almost) fully automatically. You don't have to edit any template like it's needed when you would like to use similar functionality from Material for MkDosc theme (at least it's true for <code>v9.1.5</code>). At this time (MkDocs Publisher <code>v0.5.0</code>) it's not possible to auto-generate a whole social card (this task is added to the backlog). However, it's possible to add your image as a preview with additional description, etc.</p>"},{"location":"setup/setting-up-a-social-cards#document-metadata","title":"Document metadata","text":"<p>Markdown documents can contain additional metadata that is not rendered by MkDocs. This metadata is located at the beginning of the file (more information about this you can found in MkDocs documentation in Meta-Data section).</p> <p>Some data used by social cards is global (like site name) but some are unique per document. Data needed and optional that is needed by social card is:</p> <ul> <li>(required)<code>title</code> - document title (30\u201365 characters),</li> <li>(required) <code>description</code> - short document description (120\u2013350 characters),</li> <li>(optional) <code>image</code> - link to an image (1200\u00d7630 pixels).</li> </ul> YAML Style Meta-DataMultiMarkdown Style Meta-Data <p>It's prefered style since more plugins supports it.</p> <pre><code>---\ntitle: Your document title\ndescription: A short description of document content that encourage to read it\nimage: /some/url/to/an/image.jpg\n---\nThis is the first paragraph of the document.\n</code></pre> <p>This style is NOT prefered since not all plugins supports it.</p> <pre><code>Title: Your document title\nDescription: A short description of document content that encourage to read it\nImage: /some/url/to/an/image.jpg\n\nThis is the first paragraph of the document.\n</code></pre> <p>Warning</p> <p>If any of the required key is missing, social card will not be included in a web page.</p>"},{"location":"setup/setting-up-a-social-cards#configuration","title":"Configuration","text":""},{"location":"setup/setting-up-a-social-cards#enable-social-cards","title":"Enable social cards","text":"<p>To enable the built-in social cards plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social\n</code></pre>"},{"location":"setup/setting-up-a-social-cards#settings","title":"Settings","text":""},{"location":"setup/setting-up-a-social-cards#open-graph-cards","title":"Open Graph cards","text":"enabled <p> Default: <code>true</code> - this option gives you an ability to enable or disable an Open Graph cards:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\nog:\nenabled: true\n</code></pre> locale <p> Default: <code>en_US</code> - this option gives you an ability to set a locale of an Open Graph cards:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\nog:\nlocale: en_us\n</code></pre> <p>There is a limited set of possible values.</p>"},{"location":"setup/setting-up-a-social-cards#twitter-cards","title":"Twitter cards","text":"enabled <p> Default: <code>true</code> - this option gives you an ability to enable or disable a Twitter Cards:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\ntwitter:\nenabled: true\n</code></pre> website <p> Default: <code>''</code> - this option gives you an ability to add a Twitter website account name:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\ntwitter:\nwebsite: @website\n</code></pre> author <p> Default: <code>''</code> - this option gives you an ability to add a Twitter author account name:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\ntwitter:\nauthor: @author\n</code></pre>"},{"location":"setup/setting-up-a-social-cards#metadata-keys-names","title":"Metadata keys names","text":"<p>You can change a name of the keys used to store metadata used to create social cards.</p> title_key <p> Default: <code>title</code> - this option gives you an ability to change a metadata title key used to create a social card:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\nmeta_keys:\ntitle_key: title\n</code></pre> description_key <p> Default: <code>description</code> - this option gives you an ability to change a metadata description key used to create a social card:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\nmeta_keys:\ndescription_key: description\n</code></pre> image_key <p> Default: <code>title</code> - this option gives you an ability to change a metadata image key used to create a social card:</p>  mkdocs.yml <pre><code>plugins:\n- pub-social:\nmeta_keys:\nimage_key: image\n</code></pre> <p>Backlinks:</p> Home <p><p>- social cards metadata creation based on document metadata (pub-social plugin -  v0.5.0),</p></p> v0.5.0 - 2023-04-04 <p><p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p></p>"},{"location":"setup/05-setting-up-obsidian","title":"Setting up obsidian","text":"<p>Backlinks:</p> Home <p><p>- integration with Obsidian.md as documentation editor with support for some Markdown syntax specific to it and some plugins (pub-obsidian plugin  v0.6.0):</p></p> v0.6.0 - 2023-04-20 <p><p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p></p>"},{"location":"setup/setting-up-a-minifier","title":"Setting up a minifier plugin","text":"<p>Even today, when most of us have quite fast internet connection, page size still matters to over feeling of fast page load and as one of the factors of SEO. For that reason, a good publishing tool, should allow optimizing image size and (less important) page code size optimization. Publisher for MkDocs has that ability, but it does not introduce new optimization algorithms, etc. It's using tools that are created by others and considered stable with a good performance, etc.</p>"},{"location":"setup/setting-up-a-minifier#basic-setup","title":"Basic setup","text":"<p>To simplify the entire process, below is presented a single way of installation of all the tools. If you just want to use a single tool or learn more about what tool is used for what type of file, please take a look below for an advanced setup section where it's described.</p>"},{"location":"setup/setting-up-a-minifier#tools-installation","title":"Tools installation","text":"MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install pngquant oxipng mozjpeg node\nnpm install -f --no-fund svgo html-minifier postcss cssnano postcss-svgo postcss-cli uglify-js\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install pngquant oxipng nodejs mozjpeg\nnpm install -f --no-fund svgo html-minifier postcss cssnano postcss-svgo postcss-cli uglify-js\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install rustc pngquant libjpeg-turbo-progs nodejs\ncargo install oxipng\nnpm install --no-fund -f svgo html-minifier postcss cssnano postcss-svgo postcss-cli uglify-js\n</code></pre>"},{"location":"setup/setting-up-a-minifier#configuration","title":"Configuration","text":"<p>To enable the built-in optimization plugin, the following lines have to be added to <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-minifier\n</code></pre> <p>Just like that, all optimization tools are enabled with optimal settings (according to my small experiments).</p>"},{"location":"setup/setting-up-a-minifier#advanced-setup","title":"Advanced setup","text":"<p>In day to day usage, those advanced settings, should probably not be touched. Those options are exposed, so you can adjust some settings offered by a given tool.</p>"},{"location":"setup/setting-up-a-minifier#concurrency","title":"Concurrency","text":"<p>File optimization process is a CPU intensive. Most modern computers have processors with multiple CPU cores. Each core can be used to optimize a single file. When your machine has more than one CPU core, it's good to have an ability to utilize all of them during the optimization process because it will reduce overall time needed for optimization of all files.</p> threads <p> Default: <code>0</code> - this option defines how many CPUs the plugin will use for files optimization process. If set to 0 (default value) the plugin will read the number of available CPUs from system settings. To change the value of this setting, you have to edit a <code>mkdocs.yml</code> file:</p>  mkdocs.yml <pre><code>plugins:\n- pub-minifier:\nthreads: 0\n</code></pre>"},{"location":"setup/setting-up-a-minifier#cache","title":"Cache","text":"<p>When <code>pub-minifier</code> plugin is enabled, caching is enabled by default and cannot be turned off. Caching is quite crucial since image optimization is quite a time-consuming process (especially for PNG files).</p> <p>The following configuration options are available for cache:</p> cache_dir <p> Default: <code>.cache</code> - this option defines the directory location, where the cached files are stored.</p>  mkdocs.yml <p>To change the value of this setting, you have to edit a <code>mkdocs.yml</code> file:</p> <pre><code>plugins:\n- pub-minifier:\ncache_dir: .cache\n</code></pre> <p>By default, this directory is created on the same level as <code>docs</code> directory and the directory structure looks like this:</p> <pre><code>    .\n    \u251c\u2500 .cache/\n    \u251c\u2500 docs/\n    \u2514\u2500 mkdocs.yml\n</code></pre> cache_file <p> Default: <code>.cache_files_list.yml</code> - this option defines the name of the file, where all the data needed for proper cache working is stored. When this file is missing or corrupt, it and all cached files will be recreated. This file is stored inside the cache directory, and by default, the directory structure looks like this:</p>  mkdocs.yml <pre><code>plugins:\n- pub-minifier:\ncache_file: .cache_files_list.yml\n</code></pre> <pre><code>    .\n    \u251c\u2500 .cache/\n    \u2502  \u2514\u2500 .cache_files_list.yml\n    \u251c\u2500 docs/\n    \u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"setup/setting-up-a-minifier#jpeg-optimization","title":"JPEG optimization","text":"<p>JPEG image file size optimizations are done using MozJPEG tool. As we can read on the project website:</p> <p>MozJPEG improves JPEG compression efficiency, achieving higher visual quality and smaller file sizes at the same time. It is compatible with the JPEG standard, and the vast majority of the world's deployed JPEG decoders.</p> <p>Using this tool reduces JPEG image file size up to 30% with almost no visible quality degradation. You can always try to change it by modification of default settings. Please have in mind that default values were set after my personal experiments and not always can be the most optimal one.</p>"},{"location":"setup/setting-up-a-minifier#jpeg-optimization-installation","title":"Installation","text":"<p>If you already performed a basic setup you already have this tool installed. If for any reasons you have to perform this operation separately, below you can find a set of commands that have to be executed to perform an installation.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install mozjpeg\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install mozjpeg\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install libjpeg-turbo-progs\n</code></pre>"},{"location":"setup/setting-up-a-minifier#jpeg-optimization-settings","title":"Settings","text":"<p>This section is on a #todo list.</p>"},{"location":"setup/setting-up-a-minifier#png-optimization","title":"PNG optimization","text":"<p>PNG image file size optimizations are done using a combination of 2 tools:</p> <ol> <li>pngquant - this is a tool that reduces PNG file size by changing a color palette and alpha channel. Despite those optimizations, generated images are compatible with all web browsers and operating systems.</li> <li>oxipng - this is a tool that reduces PNG file size by a lossless optimized compression algorithm.</li> </ol> <p>Using those tools reduces PNG image file size by up to 70% with almost no visible quality degradation. You can always try to change it by modification of default settings. Please have in mind that default values were set after my personal experiments and not always can be the most optimal one.</p>"},{"location":"setup/setting-up-a-minifier#png-optimization-installation","title":"Installation","text":"<p>If you already performed a basic setup you already have this tool installed. If for any reasons you have to perform this operation separately, below you can find a set of commands that have to be executed to perform an installation.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install pngquant oxipng\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install pngquant oxipng\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install rustc pngquant\ncargo install oxipng\n</code></pre>"},{"location":"setup/setting-up-a-minifier#png-optimization-settings","title":"Settings","text":"<p>This section is on a #todo list.</p>"},{"location":"setup/setting-up-a-minifier#svg-optimization","title":"SVG optimization","text":"<p>SVG vector image file size optimizations are done using SVGO tool. This is a Node.js-based tool. As we can read on the project website:</p> <p>SVG files, especially those exported from various editors, usually contain a lot of redundant and useless information. This can include editor metadata, comments, hidden elements, default or non-optimal values and other stuff that can be safely removed or converted without affecting the SVG rendering result.</p> <p>Using this tool reduces SVG vector image file size by up to 70% with no visible quality degradation. This tool has multiple plugins that impact the effectiveness of an optimization. At this time, the <code>pub-minifier</code> plugin doesn't allow changing the default settings of used SVGO plugins.</p>"},{"location":"setup/setting-up-a-minifier#svg-optimization-installation","title":"Installation","text":"<p>If you already performed a basic setup you already have this tool installed. If for any reasons you have to perform this operation separately, below you can find a set of commands that have to be executed to perform an installation.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install node\nnpm install -f --no-fund svgo\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install nodejs\nnpm install -f --no-fund svgo\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install -f --no-fund svgo\n</code></pre>"},{"location":"setup/setting-up-a-minifier#svg-optimization-settings","title":"Settings","text":"<p>This section is on a #todo list.</p>"},{"location":"setup/setting-up-a-minifier#html-optimization","title":"HTML optimization","text":"<p>HTML file size optimizations are done using html-minifier tool. This is a Node.js-based tool. As we can read on the project website:</p> <p>HTMLMinifier\u00a0is a highly\u00a0configurable,\u00a0well-tested, JavaScript-based HTML minifier.</p> <p>Using this tool reduces HTML file size by up to 30%. You can always try to change it by modification of default settings. Please have in mind that default values were set after my personal experiments and not always can be the most optimal one.</p>"},{"location":"setup/setting-up-a-minifier#html-optimization-installation","title":"Installation","text":"<p>If you already performed a basic setup you already have this tool installed. If for any reasons you have to perform this operation separately, below you can find a set of commands that have to be executed to perform an installation.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install node\nnpm install -f --no-fund html-minifier\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install nodejs\nnpm install -f --no-fund html-minifier\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install -f --no-fund html-minifier\n</code></pre>"},{"location":"setup/setting-up-a-minifier#html-optimization-settings","title":"Settings","text":"<p>This section is on a #todo list.</p>"},{"location":"setup/setting-up-a-minifier#css-optimization","title":"CSS optimization","text":"<p>CSS file size optimizations are done using PostCSS tool and some plugins:</p> <ul> <li>PostCSS CLI - this is a Command Line Interface for this tool,</li> <li>cssnano - compression tool plugin,</li> <li>postcss-svgo - inline SVG files optimization plugin using an SVGO tool (the same we are using for an SVG file optimization).</li> </ul> <p>This is a Node.js based tool. As we can read on the project website:</p> <p>CSSNANO takes your nicely formatted CSS and runs it through many focused optimisations, to ensure that the final result is as small as possible for a production environment.</p> <p>Using this tool reduces CSS file size by up to 30%. At this time, the <code>pub-minifier</code> plugin doesn't allow changing the default settings of cssnano plugins.</p>"},{"location":"setup/setting-up-a-minifier#css-optimization-installation","title":"Installation","text":"<p>If you already performed a basic setup you already have this tool installed. If for any reasons you have to perform this operation separately, below you can find a set of commands that have to be executed to perform an installation.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install node\nnpm install -f --no-fund postcss cssnano postcss-svgo postcss-cli\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install nodejs\nnpm install -f --no-fund postcss cssnano postcss-svgo postcss-cli\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install -f --no-fund postcss cssnano postcss-svgo postcss-cli\n</code></pre>"},{"location":"setup/setting-up-a-minifier#css-optimization-settings","title":"Settings","text":"<p>This section is on a #todo list.</p>"},{"location":"setup/setting-up-a-minifier#js-optimization","title":"JS optimization","text":"<p>JS file size optimizations are done using UglifyJS tool. This is a Node.js-based tool. As we can read on the project website:</p> <p>UglifyJS is a JavaScript parser, minifier, compressor and beautifier toolkit.</p> <p>Using this tool reduces JS file size by up to 20%. At this time, the <code>pub-minifier</code> plugin doesn't allow changing the default settings.</p>"},{"location":"setup/setting-up-a-minifier#js-optimization-installation","title":"Installation","text":"<p>If you already performed a basic setup you already have this tool installed. If for any reasons you have to perform this operation separately, below you can find a set of commands that have to be executed to perform an installation.</p>  MacOS Windows Ubuntu <p>In MacOS, the easiest way to install any software, is to use a Homebrew. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>brew install node\nnpm install -f --no-fund uglify-js\n</code></pre> <p>In Windows, the easiest way to install any software, is to use Scoop. You have to install it before. All the instructions can be found on project web page. After that the following commands have to be executed:</p> <pre><code>scoop bucket add main\nscoop install nodejs\nnpm install -f --no-fund uglify-js\n</code></pre> <p>In Ubuntu, the easiest way to install any software, is to use a built-in packages manager called <code>apt</code>, so you just have to execute the following commands:</p> <pre><code>sudo apt update\nsudo apt install nodejs\nnpm install -f --no-fund uglify-js\n</code></pre>"},{"location":"setup/setting-up-a-minifier#js-optimization-settings","title":"Settings","text":"<p>This section is on a #todo list.</p> <p>Backlinks:</p> Home <p><p>- file size optimizations, that is beneficial for site download speed and SEO (pub-minifier plugin -  v0.4.0),</p></p>"},{"location":"how-to-publish/first_steps","title":"First steps","text":"<p>This section is on a #todo list.</p> <p>Currently, please take a look at installation and each plugin configuration section of this documentation.</p> <p>Backlinks:</p> Setting up a blog <p><p>More detailed usage is described in how to publish.</p></p>"},{"location":"blog/v010-initial-release/","title":"v0.1.0 - Initial release","text":"<p>Another blogging plugin for MkDocs? But why?</p> <p>The simplest answer is: because I couldn't find one good enough (and free).</p> <p>The flip side of the same coin was that I wanted to migrate my personal blog related to testing (sorry only in Polish, but you can try to use Google translator) from Nikola that works quite well, but sometimes is overly complicated, has almost none search functionality and markdown files are not the default one (but it's possible to use them). Why does the Markdown format is so important? Because I love Obsidian as a tool for gathering knowledge, and this format is a crucial part of that tool.</p> <p>At the time when this plugin was created, there were no free and good alternatives. The only one that could be good enough was hidden behind a paid wall and was a part of a theme Material for MkDocs. Some of the ideas for this plugin and functionalities came from documentation of the Material for MkDocs theme, Nikola and other plugins.</p> <p>Existing alternatives (with my comment):</p> <ul> <li>Material for MkDocs - complex solution, but paid,</li> <li>mkdocs-blogging-plugin - works, but simple solution for simple blog (limited tags usage, theme files modification needed, limited use of frontmatter, limited number of features),</li> <li>mkdocs-blog-plugin - no longer maintained and simple,</li> <li>python-mkblog - no longer maintained and simple,</li> <li>mkdocs-blog - no longer maintained and simple,</li> <li>material theme modification - it's not a plugin, but a complete theme modification, it's hard to extend and configure.</li> </ul> <p>As you can see, there are just 2 still maintained plugins for blogging in MkDocs:</p> <ol> <li>Material for MkDocs - complex but paid,</li> <li>mkdosc-blogging-plugin - much simpler than Material for MkDocs and a bit hacky due to mostly tricks in the template.</li> </ol>"},{"location":"blog/v010-initial-release/#changelog","title":"Changelog","text":"<p>This project is now at an early stage of development. Current functionalities are:</p> <ul> <li> blog post update date based on metadata (post YAML frontmatter)</li> <li> blog post URL link based on metadata (post YAML frontmatter)</li> <li> blog post tags and categories based on metadata (post YAML frontmatter)</li> <li> support for blog post teaser</li> <li> auto generation of blog posts navigation</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> Home <p><p>Publisher for MkDocs is a set of plugins for MkDocs that was created originally as \u201cyet another blogging plugin for MkDocs\u201d (you can read more about this in this blog post). During a process of development, I realized that it can become something more that will help not only me with blog creation, but also as a part of a wider publishing tool. Documents creation can be used with cooperation with an Obsidian.md that is a tool for creating a second brain and also an excellent Markdown files editor.</p></p>"},{"location":"blog/v020/","title":"v0.2.0  - 2023.02.19","text":"<p>The main focus in this release is around making it a valid python package that can be published and to adding some additional functionalities around retrieving additional information from frontmatter.</p>","tags":["v0.2.0"]},{"location":"blog/v020/#changelog","title":"Changelog","text":"<p>Further development of blog plugin:</p> <ul> <li> sub-pages for archive, categories, blog</li> <li> configurable blog posts pagination with page navigation</li> <li> interface language change: EN and PL (help wanted with more languages)</li> <li> possibility to override for all interface text elements</li> <li> valid python package at pypi.org</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p>","tags":["v0.2.0"]},{"location":"blog/v030/","title":"v0.3.0 - 2023.02.20","text":"<p>This release was a quick fix for a wrong directory structure in <code>site-packages</code> after package installation.</p>","tags":["v0.3.0"]},{"location":"blog/v040/","title":"v0.4.0 - 2023-03-28","text":"<p>In this release, many things have happened, but the most important one is a project rename.</p> <p>During a development, many ideas about further development came to my mind. I have created a backlog.</p>","tags":["v0.4.0"]},{"location":"blog/v040/#changelog","title":"Changelog","text":"","tags":["v0.4.0"]},{"location":"blog/v040/#general","title":"General","text":"<ul> <li> project name</li> <li> cross configuration of blog and auto-nav plugins:<ul> <li>blog does not add auto-nav meta files</li> <li>auto-nav automatically adds blog directory to skipped directories since it will be built by blog</li> <li>if one of the plugins is not enabled, other is not using its values</li> </ul> </li> <li> documentation</li> </ul>","tags":["v0.4.0"]},{"location":"blog/v040/#blog","title":"Blog","text":"<ul> <li> possibility to choose a blog as a starting page with option to define manually blog in nav configuration</li> <li> <code>slug</code> config option for setting an entire blog's main directory URL</li> <li> internal file structure refactor with new global plugin config (<code>BlogConfig</code> class) that will help with further development with small fixes and improvements</li> <li> blog subdirectory navigation creation (entry path needs to be equal to subdirectory name)</li> <li> live reload infinite loop during <code>serve</code> caused by temporary files created and removed in blog directory</li> <li> navigation is no longer overridden by a blog (if there is no other nav, blog will create on with recent posts as a main page)</li> </ul>","tags":["v0.4.0"]},{"location":"blog/v040/#minifier-new-plugin","title":"Minifier (new plugin)","text":"<ul> <li> PNG image minifier (using: pngquant and oxipng)</li> <li> JPG image minifier (using: mozjpeg)</li> <li> SVG image minifier (using: svgo)</li> <li> HTML file minifier (using: html-minifier)</li> <li> CSS file minifier (using: postcss with plugins: cssnano, svgo)</li> <li> JS file minifier (using: uglifyjs)</li> </ul>","tags":["v0.4.0"]},{"location":"blog/v040/#auto-nav-new-plugin","title":"Auto-nav (new plugin)","text":"<ul> <li> build navigation based on file names</li> <li> directory metadata and additional settings can be set in a frontmatter of <code>*.md</code> file (default to <code>README.md</code>)</li> <li> configuration of sort prefix delimiter</li> <li> sort prefix removal in URL and site files</li> <li> read file title from <code>title</code> metadata key</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> Home <p><p>- automatic navigation builds (pub-auto-nav plugin -  v0.4.0),</p><p>- file size optimizations, that is beneficial for site download speed and SEO (pub-minifier plugin -  v0.4.0),</p></p>","tags":["v0.4.0"]},{"location":"blog/v041/","title":"v0.4.1 - 2023-03-28","text":"","tags":["v0.4.1"]},{"location":"blog/v041/#changelog","title":"Changelog","text":"<ul> <li> links in documentation</li> <li> imports of libraries</li> <li> badges links + new added</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p>","tags":["v0.4.1"]},{"location":"blog/v050/","title":"v0.5.0 - 2023-04-04","text":"<p>Material for MkDocs has its own social cards plugin, but there are some limitations of it (or rather I should say, their implementation is limiting in some areas). The Material approach to social cards is to generate an image based on document information and requires changing the template manually to add those cards.</p> <p>Publisher for MkDocs uses a different approach to social cards:</p> <ul> <li>you can set an image per document, but you have to create this image by yourself - it gives you a better control over how it looks like, so it can be more create than the one generated from the template,</li> <li>you don't have to change a document template because all the data related to social cards is injected into HTML code of the document while rendering it.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p>","tags":["v0.5.0"]},{"location":"blog/v050/#changelog","title":"Changelog","text":"","tags":["v0.5.0"]},{"location":"blog/v050/#blog","title":"Blog","text":"<ul> <li> index blog post title is now a link to a post</li> </ul>","tags":["v0.5.0"]},{"location":"blog/v050/#social-new-plugin","title":"Social (new plugin)","text":"<ul> <li> automatic addition of Open Graph tags directly into HTML code (no template modification is needed) based on document meta</li> <li> automatic addition of Twitter tags directly into HTML code (no template modification is needed) based on document meta</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> Home <p><p>- social cards metadata creation based on document metadata (pub-social plugin -  v0.5.0),</p></p>","tags":["v0.5.0"]},{"location":"blog/v060/","title":"v0.6.0 - 2023-04-20","text":"<p>This was quite a journey to make this release. So far, this whole documentation was created inside the Obsidian but since all the files are just a flat text file written using Markdown syntax, you were unable to see it. The reason for that was simple: integration with Obsidian was not \"mature\" enough to be presented. You can ask: \"Why? Obsidian just uses the same Markdown syntax as MkDocs uses\". The answer to that is not so obvious. The simple answer is just \"yes\", but the real answer is \"not always\". Obsidian introduces some additional syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. If you use them \"as is\" in MkDocs, you will see a pure (not parsed) text, not the intended one since MkDocs does not understand this syntax. To make it \"understandable\" for MkDocs, it has to be \"translated\" into regular Markdown syntax. For that reason, a new plugin was created, that supports not only the mentioned Obsidian elements, but also some additional ones like:</p> <ul> <li>backlinks,</li> <li>charts (using Vega Visualization Plugin for Obsidian),</li> <li>mind maps (using Mindmap NextGen plugin for Obsidian).</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p>","tags":["v0.6.0"]},{"location":"blog/v060/#changelog","title":"Changelog","text":"","tags":["v0.6.0"]},{"location":"blog/v060/#general","title":"General","text":"<ul> <li> internal class for HTML modifications</li> <li> project license to MIT</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#auto-nav","title":"Auto-nav","text":"<ul> <li> possibility to define <code>skip_dir</code> value in <code>README.md</code> (this affects only the directory and all subdirectories where the file is located)</li> <li> skip directories that name start with <code>_</code> (can be configured and disbled)</li> <li> second level directories were producing double menu entries</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#blog","title":"Blog","text":"<ul> <li> internal links for blog teaser/index, category, tag or archive pages</li> <li> remove <code>edit_url</code> for blog teaser/index, category, tag or archive pages</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#social","title":"Social","text":"<ul> <li> code refactor of HTML modification elements and logging added</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#obsidian-new-plugin","title":"Obsidian (new plugin):","text":"<p>This plugin is a set of functionalities and should be split into various smaller plugins, but due to some cross functionalities, it has been integrated into the bigger one. Each sub plugin can be controlled separately, so if you don't need all the functionalities, you can just disable them or simply do not enable one that are disabled by default.</p>","tags":["v0.6.0"]},{"location":"blog/v060/#general_1","title":"General","text":"<ul> <li> server watch can omit <code>.obsidian</code> directory that needs to be a part of the documentation directory that is automatically added into watch and causes server reload on (almost) any interaction with obsidian (changing settings etc.)</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#wikilinks","title":"WikiLinks","text":"","tags":["v0.6.0"]},{"location":"blog/v060/#callouts","title":"Callouts","text":"<ul> <li> mapping of all Obsidian callouts into Markdown admonitions</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#backlinks","title":"Backlinks","text":"<ul> <li> auto-generation of backlinks for all internal documents (visible as an custom admonition at the bottom of the page)</li> <li> backlinks are not generated for blog temporary files like post indexes, archive, tags and categories</li> <li> backlinks are grouped per page like in Obsidian (if more than one link is pointing from one page to another, all context links will be visible)</li> </ul>","tags":["v0.6.0"]},{"location":"blog/v060/#charts","title":"Charts","text":"<ul> <li> support for vega and vega-lite charts when added by Vega Visualization Plugin for Obsidian</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p> <p>Backlinks:</p> Home <p><p>- integration with Obsidian.md as documentation editor with support for some Markdown syntax specific to it and some plugins (pub-obsidian plugin  v0.6.0):</p></p>","tags":["v0.6.0"]},{"location":"dev/backlog","title":"Plans for future development","text":"<p>Below lists is a list of tasks that are planned to be done (a backlog) and there is no particular order when they will be implemented. If you are interested in any of the below points being implemented in a first place or there is something missing here, please report and issue.</p>"},{"location":"dev/backlog#plugins","title":"Plugins","text":""},{"location":"dev/backlog#auto-nav","title":"Auto-nav","text":"<p>There is no development plans at this moment.</p>"},{"location":"dev/backlog#blog","title":"Blog","text":"<ul> <li> Add: blog post reading time + watch time (defined in post meta)</li> <li> Add: possibility to disable categories and/or tags pages</li> <li> Add: automatic add search exclude to draft and hidden pages when using material for MkDocs theme with search plugin enabled</li> <li> Add: authors and update date in the template</li> <li> Add: blog posts index template override</li> <li> Add: language override in YAML file</li> <li> Add: configurable date format</li> <li> Add: blog post publication state: draft, published, hidden</li> <li> Add: auto-generate slug based on slugify (+ inject into document metadata)</li> <li> Fix: <code>blog</code> slug do not open first page when not in standalone mode</li> <li> Fix: remove slug and make it automatically the same as <code>blog_dir</code></li> <li> Fix: if there is a page in <code>nav</code> that is right before blog, next page is called <code>index-0</code> instead of <code>blog</code></li> </ul>"},{"location":"dev/backlog#minifier","title":"Minifier","text":"<ul> <li> Add: ignored files list/pattern (globally and per file type)</li> <li> Add: stats for number of minified/taken from cache files</li> <li> Add: cache disable (globally and per file type)</li> <li> Add: configurable file extensions per minifier</li> </ul>"},{"location":"dev/backlog#automations-new-plugin","title":"Automations (new plugin)","text":"<ul> <li> Add: automatic addition of <code>extra_css</code> and <code>extra_js</code> files</li> <li> Add: automatic addition of <code>loading</code> attribute to all images and iframes for lazy-loading</li> </ul>"},{"location":"dev/backlog#status-new-plugin","title":"Status (new plugin)","text":"<ul> <li> Add: usage of page frontmatter</li> <li> Add: document publication state: draft, published, hidden</li> <li> Add: sitemap optimizations and creation of <code>robots.txt</code> file based on document status</li> </ul>"},{"location":"dev/backlog#social","title":"Social","text":"<ul> <li> Add: image generator if one is not provided</li> <li> Add: ignored file list/pattern</li> <li> Add: warning on missing meta key</li> <li> Add: ignore single file based on frontmatter</li> <li> Add: check for description and title length (SEO)</li> <li> Add: set up a default image used for a social card</li> </ul>"},{"location":"dev/backlog#seo-new-plugin","title":"SEO (new plugin)","text":"<ul> <li> Add: multiple html <code>&lt;meta name=\"author\"&gt;</code> based on frontmatter authors</li> <li> Add: multiple html <code>&lt;meta name=\"keywords\"&gt;</code> based on frontmatter categories and tags</li> <li> Add: publisher html value<code>&lt;link href=\"{site_url}\" rel=\"publisher\" /&gt;</code> that points to the main page URL</li> <li> Add: robots html settings <code>&lt;meta name=\"robots\" content=\"noindex, nofollow\" /&gt;</code></li> <li> Add: check for description and title length (SEO)</li> </ul>"},{"location":"dev/backlog#obsidian-new-plugin","title":"Obsidian (new plugin)","text":"<ul> <li> Add: mind maps (using markmap)</li> <li> Add: templates (blog post, page, etc.)</li> <li> Add: graph view (long-term goal)</li> </ul>"},{"location":"dev/backlog#general","title":"General","text":""},{"location":"dev/backlog#cli-tool","title":"CLI tool","text":"<ul> <li> Add: project initialization that preconfigure <code>mkdocs.yml</code></li> <li> Add: create a new blog post</li> <li> Add: document/blog post slug update</li> <li> Add: check for minifier tools</li> <li> Add: clean minifier cache</li> <li> Add: minify single file using minifier</li> <li> Add: document/blog post publication state change</li> </ul>"},{"location":"dev/backlog#documentation","title":"Documentation","text":"<ul> <li> Blog plugin</li> <li> Minifier plugin</li> <li> Auto-nav plugin</li> <li> Integration with RSS plugin</li> <li> How to set up and use docker image</li> <li> Setting up CI/CD in GitHub Actions</li> <li> This plugin development how to</li> <li> Credits for used libraries with description (like in MkDocs Coverage Plugin)</li> </ul>"},{"location":"dev/backlog#other","title":"Other","text":"<ul> <li> Create Docker image with everything preinstalled and preconfigured</li> <li> Add to docker image online vega charts editor</li> <li> GitHub repo with preconfigured pages, etc. (can be integrated with Docker Image creation)</li> <li> Unit tests and code coverage with pre-commit</li> <li> Cleanup list of code TODO's</li> <li> Drop <code>python-frontmatter</code> for MkDocs built-in library for metadata retrieval</li> <li> Move translations to jinja templates like Material for MkDocs is doing it</li> </ul> <p>Backlinks:</p> Setting up social cards <p><p>When you are a blogger or a person who wants to publish some documentation, book or any other piece of written text, you probably also want to share it over social media. Most platforms (like Facebook, LinkedIn, etc.) uses some web page metadata called Open Graph. Twitter is using part of this data and some additional metadata called Twitter Cards. No matter if you want to share your text with Facebook or Twitter, MkDocs Publisher is here to help you with this task and is doing it (almost) fully automatically. You don't have to edit any template like it's needed when you would like to use similar functionality from Material for MkDosc theme (at least it's true for <code>v9.1.5</code>). At this time (MkDocs Publisher <code>v0.5.0</code>) it's not possible to auto-generate a whole social card (this task is added to the backlog). However, it's possible to add your image as a preview with additional description, etc.</p></p>"},{"location":"dev/versioning","title":"Approach to versioning","text":"<p>The current approach to versioning of \u201cPublisher for MkDocs\u201d is based on semantic versioning and looks like this <code>v1.2.3</code>, or in general, it's: <code>vMAJOR,MINOR,PATCH</code> where:</p> <ul> <li><code>MAJOR</code> number is increased when a new braking API change is introduced,</li> <li><code>MINOR</code> number is increased when new functionality is introduced without API changes,</li> <li><code>PATCH</code> number is increased when there is no new functionality and usually is used for bug fixes.</li> </ul> <p>Because this package is based on MkDocs API, the only reason to change <code>MAJOR</code> number would be to break compatibility with an older version of MkDocs or when this package will go out of beta stage.</p> <p>Since this package contains various sets of plugins, <code>MINOR</code> number will be changed when a new plugin is introduced or an existing one changes significantly (new config options, new functionality added, etc.).</p> <p><code>PATCH</code> number will be used mostly for bug fixes and smaller internal changes like documentation modifications, code refactor or unit testing changes.</p>"},{"location":"dev/development","title":"Development","text":""},{"location":"dev/development#install-as-editable-library","title":"Install as editable library","text":"pippoetry <pre><code>pip install --editable ../mkdocs-publisher/\n</code></pre> <pre><code>poetry add --editable ../mkdocs-publisher/\n</code></pre>"},{"location":"dev/development#install-from-build-package","title":"Install from build package","text":"pippoetry <pre><code>pip install ../mkdocs-publisher/dist/mkdocs-publisher-0.4.1.tar.gz\n</code></pre> <pre><code>poetry add ../mkdocs-publisher/dist/mkdocs-publisher-0.4.1.tar.gz\n</code></pre>"},{"location":"dev/development#remove-from-dependencies","title":"Remove from dependencies","text":"pippoetry <pre><code>pip uninstall mkdocs-publisher\n</code></pre> <pre><code>poetry remove mkdocs-publisher\n</code></pre>"},{"location":"dev/changelog","title":"Version history","text":""},{"location":"dev/changelog#050--20230404","title":"0.5.0 \u2013 2023.04.04","text":"<p>Blog:</p> <ul> <li>add: index blog post title is now a link to a post</li> </ul> <p>Social (new plugin):</p> <ul> <li>add: automatic addition of open graph tags directly into HTML code (no template modification is needed) based on document meta</li> <li>add: automatic addition of twitter tags directly into HTML code (no template modification is needed) based on document meta</li> </ul>"},{"location":"dev/changelog#041---2023-03-28","title":"0.4.1 - 2023-03-28","text":"<p>General:</p> <ul> <li>fix: links in documentation</li> <li>fix: imports of libraries</li> <li>fix: badges links + new added</li> </ul>"},{"location":"dev/changelog#040---2023-03-28","title":"0.4.0 - 2023-03-28","text":"<p>General:</p> <ul> <li>changed: project rename</li> <li>added: cross configuration of blog and auto-nav plugins:</li> <li>blog does not add auto-nav meta files</li> <li>auto-nav automatically adds blog directory to skipped directories since it will be built by blog</li> <li>if one of the plugins is not enabled, other is not using its values</li> </ul> <p>Blog:</p> <ul> <li>added: possibility to choose a blog as a starting page with option to define manually blog in nav configuration</li> <li>added: <code>slug</code> config option for setting an entire blog's main directory URL</li> <li>changed: internal file structure refactor with new global plugin config (BlogConfig class) that will help with further development with small fixes and improvements</li> <li>changed: blog subdirectory navigation creation (entry path needs to be equal to subdirectory name)</li> <li>fixed: live reload infinite loop during <code>serve</code> caused by temporary files created and removed in blog directory</li> <li>fixed: navigation is no longer overridden by a blog (if there is no other nav, blog will create on with recent posts as a main page)</li> </ul> <p>Minifier (new plugin):</p> <ul> <li>added: PNG image minifier (using: pngquant and oxipng)</li> <li>added: JPG image minifier (using: mozjpeg)</li> <li>added: SVG image minifier (using: svgo)</li> <li>added: HTML file minifier (using: html-minifier)</li> <li>added: CSS file minifier (using: postcss with plugins: cssnano, svgo)</li> <li>added: JS file minifier (using: uglifyjs)</li> <li>added: read number of threads from system</li> </ul> <p>Auto-nav (new plugin):</p> <ul> <li>added: build navigation based on file names</li> <li>added: directory metadata and additional settings can be set in a frontmatter of <code>*.md</code> file (default to <code>README.md</code>)</li> <li>added: configuration of sort prefix delimiter</li> <li>added: sort prefix removal in URL and site files</li> </ul>"},{"location":"dev/changelog#030---20230220","title":"0.3.0 - 2023.02.20","text":"<ul> <li>fixed: for wrong directory structure in site-packages after install</li> </ul>"},{"location":"dev/changelog#020---20230220","title":"0.2.0 - 2023.02.20","text":"<ul> <li>added: sub-pages for archive, categories, blog</li> <li>added: configurable blog posts pagination with page navigation</li> <li>added: interface language change: EN and PL (help wanted with more languages)</li> <li>added: possibility to override for all interface text elements</li> </ul>"},{"location":"dev/changelog#010---initial-release","title":"0.1.0 - initial release","text":"<ul> <li>added: blog post update date based on metadata</li> <li>added: blog post URL link based on metadata</li> <li>added: blog post tags and categories based on metadata</li> <li>added: support for blog post teaser</li> <li>added: auto generation of blog posts navigation</li> </ul>"},{"location":"index-0/","title":"Blog","text":""},{"location":"index-0/#v060---2023-04-20","title":"v0.6.0 - 2023-04-20","text":"<p>2023-04-20 21:26:12</p> #v0.6.0 <p>This was quite a journey to make this release. So far, this whole documentation was created inside the Obsidian but since all the files are just a flat text file written using Markdown syntax, you were unable to see it. The reason for that was simple: integration with Obsidian was not \"mature\" enough to be presented. You can ask: \"Why? Obsidian just uses the same Markdown syntax as MkDocs uses\". The answer to that is not so obvious. The simple answer is just \"yes\", but the real answer is \"not always\". Obsidian introduces some additional syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. If you use them \"as is\" in MkDocs, you will see a pure (not parsed) text, not the intended one since MkDocs does not understand this syntax. To make it \"understandable\" for MkDocs, it has to be \"translated\" into regular Markdown syntax. For that reason, a new plugin was created, that supports not only the mentioned Obsidian elements, but also some additional ones like:</p> <ul> <li>backlinks,</li> <li>charts (using Vega Visualization Plugin for Obsidian),</li> <li>mind maps (using Mindmap NextGen plugin for Obsidian).</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p>          Read more"},{"location":"index-0/#v050---2023-04-04","title":"v0.5.0 - 2023-04-04","text":"<p>2023-04-04 21:26:12</p> #v0.5.0 <p>Material for MkDocs has its own social cards plugin, but there are some limitations of it (or rather I should say, their implementation is limiting in some areas). The Material approach to social cards is to generate an image based on document information and requires changing the template manually to add those cards.</p> <p>Publisher for MkDocs uses a different approach to social cards:</p> <ul> <li>you can set an image per document, but you have to create this image by yourself - it gives you a better control over how it looks like, so it can be more create than the one generated from the template,</li> <li>you don't have to change a document template because all the data related to social cards is injected into HTML code of the document while rendering it.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p>          Read more"},{"location":"index-0/#v041---2023-03-28","title":"v0.4.1 - 2023-03-28","text":"<p>2023-03-28 17:32:00</p> #v0.4.1"},{"location":"index-0/#changelog","title":"Changelog","text":"<ul> <li> links in documentation</li> <li> imports of libraries</li> <li> badges links + new added</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p>"},{"location":"index-0/#v040---2023-03-28","title":"v0.4.0 - 2023-03-28","text":"<p>2023-03-28 02:00:00</p> #v0.4.0 <p>In this release, many things have happened, but the most important one is a project rename.</p> <p>During a development, many ideas about further development came to my mind. I have created a backlog.</p>          Read more"},{"location":"index-0/#v030---20230220","title":"v0.3.0 - 2023.02.20","text":"<p>2023-02-20 22:00:00</p> #v0.3.0 <p>This release was a quick fix for a wrong directory structure in <code>site-packages</code> after package installation.</p>"},{"location":"index-1/","title":"Blog","text":""},{"location":"index-1/#v020----20230219","title":"v0.2.0  - 2023.02.19","text":"<p>2023-02-20 19:00:00</p> #v0.2.0 <p>The main focus in this release is around making it a valid python package that can be published and to adding some additional functionalities around retrieving additional information from frontmatter.</p>          Read more"},{"location":"index-1/#v010---initial-release","title":"v0.1.0 - Initial release","text":"<p>2023-02-02 22:00:00</p> #v0.1.0 <p>Another blogging plugin for MkDocs? But why?</p> <p>The simplest answer is: because I couldn't find one good enough (and free).</p> <p>The flip side of the same coin was that I wanted to migrate my personal blog related to testing (sorry only in Polish, but you can try to use Google translator) from Nikola that works quite well, but sometimes is overly complicated, has almost none search functionality and markdown files are not the default one (but it's possible to use them). Why does the Markdown format is so important? Because I love Obsidian as a tool for gathering knowledge, and this format is a crucial part of that tool.</p> <p>At the time when this plugin was created, there were no free and good alternatives. The only one that could be good enough was hidden behind a paid wall and was a part of a theme Material for MkDocs. Some of the ideas for this plugin and functionalities came from documentation of the Material for MkDocs theme, Nikola and other plugins.</p>          Read more"},{"location":"blog/archive/2023/","title":"Archive - 2023","text":""},{"location":"blog/archive/2023/#v060---2023-04-20","title":"v0.6.0 - 2023-04-20","text":"<p>2023-04-20 21:26:12</p> #v0.6.0 <p>This was quite a journey to make this release. So far, this whole documentation was created inside the Obsidian but since all the files are just a flat text file written using Markdown syntax, you were unable to see it. The reason for that was simple: integration with Obsidian was not \"mature\" enough to be presented. You can ask: \"Why? Obsidian just uses the same Markdown syntax as MkDocs uses\". The answer to that is not so obvious. The simple answer is just \"yes\", but the real answer is \"not always\". Obsidian introduces some additional syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. If you use them \"as is\" in MkDocs, you will see a pure (not parsed) text, not the intended one since MkDocs does not understand this syntax. To make it \"understandable\" for MkDocs, it has to be \"translated\" into regular Markdown syntax. For that reason, a new plugin was created, that supports not only the mentioned Obsidian elements, but also some additional ones like:</p> <ul> <li>backlinks,</li> <li>charts (using Vega Visualization Plugin for Obsidian),</li> <li>mind maps (using Mindmap NextGen plugin for Obsidian).</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p>          Read more"},{"location":"blog/archive/2023/#v050---2023-04-04","title":"v0.5.0 - 2023-04-04","text":"<p>2023-04-04 21:26:12</p> #v0.5.0 <p>Material for MkDocs has its own social cards plugin, but there are some limitations of it (or rather I should say, their implementation is limiting in some areas). The Material approach to social cards is to generate an image based on document information and requires changing the template manually to add those cards.</p> <p>Publisher for MkDocs uses a different approach to social cards:</p> <ul> <li>you can set an image per document, but you have to create this image by yourself - it gives you a better control over how it looks like, so it can be more create than the one generated from the template,</li> <li>you don't have to change a document template because all the data related to social cards is injected into HTML code of the document while rendering it.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p>          Read more"},{"location":"blog/archive/2023/#v041---2023-03-28","title":"v0.4.1 - 2023-03-28","text":"<p>2023-03-28 17:32:00</p> #v0.4.1"},{"location":"blog/archive/2023/#changelog","title":"Changelog","text":"<ul> <li> links in documentation</li> <li> imports of libraries</li> <li> badges links + new added</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p>"},{"location":"blog/archive/2023/#v040---2023-03-28","title":"v0.4.0 - 2023-03-28","text":"<p>2023-03-28 02:00:00</p> #v0.4.0 <p>In this release, many things have happened, but the most important one is a project rename.</p> <p>During a development, many ideas about further development came to my mind. I have created a backlog.</p>          Read more"},{"location":"blog/archive/2023/#v030---20230220","title":"v0.3.0 - 2023.02.20","text":"<p>2023-02-20 22:00:00</p> #v0.3.0 <p>This release was a quick fix for a wrong directory structure in <code>site-packages</code> after package installation.</p>"},{"location":"blog/archive/2023/#v020----20230219","title":"v0.2.0  - 2023.02.19","text":"<p>2023-02-20 19:00:00</p> #v0.2.0 <p>The main focus in this release is around making it a valid python package that can be published and to adding some additional functionalities around retrieving additional information from frontmatter.</p>          Read more"},{"location":"blog/archive/2023/#v010---initial-release","title":"v0.1.0 - Initial release","text":"<p>2023-02-02 22:00:00</p> #v0.1.0 <p>Another blogging plugin for MkDocs? But why?</p> <p>The simplest answer is: because I couldn't find one good enough (and free).</p> <p>The flip side of the same coin was that I wanted to migrate my personal blog related to testing (sorry only in Polish, but you can try to use Google translator) from Nikola that works quite well, but sometimes is overly complicated, has almost none search functionality and markdown files are not the default one (but it's possible to use them). Why does the Markdown format is so important? Because I love Obsidian as a tool for gathering knowledge, and this format is a crucial part of that tool.</p> <p>At the time when this plugin was created, there were no free and good alternatives. The only one that could be good enough was hidden behind a paid wall and was a part of a theme Material for MkDocs. Some of the ideas for this plugin and functionalities came from documentation of the Material for MkDocs theme, Nikola and other plugins.</p>          Read more"},{"location":"blog/categories/release/","title":"Category - release","text":""},{"location":"blog/categories/release/#v060---2023-04-20","title":"v0.6.0 - 2023-04-20","text":"<p>2023-04-20 21:26:12</p> #v0.6.0 <p>This was quite a journey to make this release. So far, this whole documentation was created inside the Obsidian but since all the files are just a flat text file written using Markdown syntax, you were unable to see it. The reason for that was simple: integration with Obsidian was not \"mature\" enough to be presented. You can ask: \"Why? Obsidian just uses the same Markdown syntax as MkDocs uses\". The answer to that is not so obvious. The simple answer is just \"yes\", but the real answer is \"not always\". Obsidian introduces some additional syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. If you use them \"as is\" in MkDocs, you will see a pure (not parsed) text, not the intended one since MkDocs does not understand this syntax. To make it \"understandable\" for MkDocs, it has to be \"translated\" into regular Markdown syntax. For that reason, a new plugin was created, that supports not only the mentioned Obsidian elements, but also some additional ones like:</p> <ul> <li>backlinks,</li> <li>charts (using Vega Visualization Plugin for Obsidian),</li> <li>mind maps (using Mindmap NextGen plugin for Obsidian).</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p>          Read more"},{"location":"blog/categories/release/#v050---2023-04-04","title":"v0.5.0 - 2023-04-04","text":"<p>2023-04-04 21:26:12</p> #v0.5.0 <p>Material for MkDocs has its own social cards plugin, but there are some limitations of it (or rather I should say, their implementation is limiting in some areas). The Material approach to social cards is to generate an image based on document information and requires changing the template manually to add those cards.</p> <p>Publisher for MkDocs uses a different approach to social cards:</p> <ul> <li>you can set an image per document, but you have to create this image by yourself - it gives you a better control over how it looks like, so it can be more create than the one generated from the template,</li> <li>you don't have to change a document template because all the data related to social cards is injected into HTML code of the document while rendering it.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p>          Read more"},{"location":"blog/categories/release/#v041---2023-03-28","title":"v0.4.1 - 2023-03-28","text":"<p>2023-03-28 17:32:00</p> #v0.4.1"},{"location":"blog/categories/release/#changelog","title":"Changelog","text":"<ul> <li> links in documentation</li> <li> imports of libraries</li> <li> badges links + new added</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p>"},{"location":"blog/categories/release/#v040---2023-03-28","title":"v0.4.0 - 2023-03-28","text":"<p>2023-03-28 02:00:00</p> #v0.4.0 <p>In this release, many things have happened, but the most important one is a project rename.</p> <p>During a development, many ideas about further development came to my mind. I have created a backlog.</p>          Read more"},{"location":"blog/categories/release/#v030---20230220","title":"v0.3.0 - 2023.02.20","text":"<p>2023-02-20 22:00:00</p> #v0.3.0 <p>This release was a quick fix for a wrong directory structure in <code>site-packages</code> after package installation.</p>"},{"location":"blog/categories/release/#v020----20230219","title":"v0.2.0  - 2023.02.19","text":"<p>2023-02-20 19:00:00</p> #v0.2.0 <p>The main focus in this release is around making it a valid python package that can be published and to adding some additional functionalities around retrieving additional information from frontmatter.</p>          Read more"},{"location":"blog/categories/release/#v010---initial-release","title":"v0.1.0 - Initial release","text":"<p>2023-02-02 22:00:00</p> #v0.1.0 <p>Another blogging plugin for MkDocs? But why?</p> <p>The simplest answer is: because I couldn't find one good enough (and free).</p> <p>The flip side of the same coin was that I wanted to migrate my personal blog related to testing (sorry only in Polish, but you can try to use Google translator) from Nikola that works quite well, but sometimes is overly complicated, has almost none search functionality and markdown files are not the default one (but it's possible to use them). Why does the Markdown format is so important? Because I love Obsidian as a tool for gathering knowledge, and this format is a crucial part of that tool.</p> <p>At the time when this plugin was created, there were no free and good alternatives. The only one that could be good enough was hidden behind a paid wall and was a part of a theme Material for MkDocs. Some of the ideas for this plugin and functionalities came from documentation of the Material for MkDocs theme, Nikola and other plugins.</p>          Read more"},{"location":"blog/tags/v0.1.0/","title":"Tag - v0.1.0","text":""},{"location":"blog/tags/v0.1.0/#v010---initial-release","title":"v0.1.0 - Initial release","text":"<p>2023-02-02 22:00:00</p> #v0.1.0 <p>Another blogging plugin for MkDocs? But why?</p> <p>The simplest answer is: because I couldn't find one good enough (and free).</p> <p>The flip side of the same coin was that I wanted to migrate my personal blog related to testing (sorry only in Polish, but you can try to use Google translator) from Nikola that works quite well, but sometimes is overly complicated, has almost none search functionality and markdown files are not the default one (but it's possible to use them). Why does the Markdown format is so important? Because I love Obsidian as a tool for gathering knowledge, and this format is a crucial part of that tool.</p> <p>At the time when this plugin was created, there were no free and good alternatives. The only one that could be good enough was hidden behind a paid wall and was a part of a theme Material for MkDocs. Some of the ideas for this plugin and functionalities came from documentation of the Material for MkDocs theme, Nikola and other plugins.</p>          Read more"},{"location":"blog/tags/v0.2.0/","title":"Tag - v0.2.0","text":""},{"location":"blog/tags/v0.2.0/#v020----20230219","title":"v0.2.0  - 2023.02.19","text":"<p>2023-02-20 19:00:00</p> #v0.2.0 <p>The main focus in this release is around making it a valid python package that can be published and to adding some additional functionalities around retrieving additional information from frontmatter.</p>          Read more"},{"location":"blog/tags/v0.3.0/","title":"Tag - v0.3.0","text":""},{"location":"blog/tags/v0.3.0/#v030---20230220","title":"v0.3.0 - 2023.02.20","text":"<p>2023-02-20 22:00:00</p> #v0.3.0 <p>This release was a quick fix for a wrong directory structure in <code>site-packages</code> after package installation.</p>"},{"location":"blog/tags/v0.4.0/","title":"Tag - v0.4.0","text":""},{"location":"blog/tags/v0.4.0/#v040---2023-03-28","title":"v0.4.0 - 2023-03-28","text":"<p>2023-03-28 02:00:00</p> #v0.4.0 <p>In this release, many things have happened, but the most important one is a project rename.</p> <p>During a development, many ideas about further development came to my mind. I have created a backlog.</p>          Read more"},{"location":"blog/tags/v0.4.1/","title":"Tag - v0.4.1","text":""},{"location":"blog/tags/v0.4.1/#v041---2023-03-28","title":"v0.4.1 - 2023-03-28","text":"<p>2023-03-28 17:32:00</p> #v0.4.1"},{"location":"blog/tags/v0.4.1/#changelog","title":"Changelog","text":"<ul> <li> links in documentation</li> <li> imports of libraries</li> <li> badges links + new added</li> </ul> <p>Legend</p> <p> - added</p> <p> - fixed</p> <p> - changed</p>"},{"location":"blog/tags/v0.5.0/","title":"Tag - v0.5.0","text":""},{"location":"blog/tags/v0.5.0/#v050---2023-04-04","title":"v0.5.0 - 2023-04-04","text":"<p>2023-04-04 21:26:12</p> #v0.5.0 <p>Material for MkDocs has its own social cards plugin, but there are some limitations of it (or rather I should say, their implementation is limiting in some areas). The Material approach to social cards is to generate an image based on document information and requires changing the template manually to add those cards.</p> <p>Publisher for MkDocs uses a different approach to social cards:</p> <ul> <li>you can set an image per document, but you have to create this image by yourself - it gives you a better control over how it looks like, so it can be more create than the one generated from the template,</li> <li>you don't have to change a document template because all the data related to social cards is injected into HTML code of the document while rendering it.</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-social plugin documentation.</p>          Read more"},{"location":"blog/tags/v0.6.0/","title":"Tag - v0.6.0","text":""},{"location":"blog/tags/v0.6.0/#v060---2023-04-20","title":"v0.6.0 - 2023-04-20","text":"<p>2023-04-20 21:26:12</p> #v0.6.0 <p>This was quite a journey to make this release. So far, this whole documentation was created inside the Obsidian but since all the files are just a flat text file written using Markdown syntax, you were unable to see it. The reason for that was simple: integration with Obsidian was not \"mature\" enough to be presented. You can ask: \"Why? Obsidian just uses the same Markdown syntax as MkDocs uses\". The answer to that is not so obvious. The simple answer is just \"yes\", but the real answer is \"not always\". Obsidian introduces some additional syntax options like callouts (equivalent to Markdown admonitions) and WikiLinks for creating internal links. If you use them \"as is\" in MkDocs, you will see a pure (not parsed) text, not the intended one since MkDocs does not understand this syntax. To make it \"understandable\" for MkDocs, it has to be \"translated\" into regular Markdown syntax. For that reason, a new plugin was created, that supports not only the mentioned Obsidian elements, but also some additional ones like:</p> <ul> <li>backlinks,</li> <li>charts (using Vega Visualization Plugin for Obsidian),</li> <li>mind maps (using Mindmap NextGen plugin for Obsidian).</li> </ul> <p>If you need support for additional plugins, please make an issue with a future description.</p> <p>For more details about this release, read more below or jump directly to pub-obsidian plugin documentation.</p>          Read more"}]}
